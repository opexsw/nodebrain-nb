\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename nb_tree.info
@include version.texi
@settitle Tree NodeBrain Module
@c %**end of header

@finalout
@paragraphindent none
@setchapternewpage odd

@copying
Tree NodeBrain Module@*
@value{UPDATED-MONTH}@*
NodeBrain Open Source Projet

@sp 2
@b{Release @value{RELEASE}}

Author: Ed Trettevik

Copyright @copyright{} 2014 Ed Trettevik <eat@@nodebrain.org>

@sp 1
Permission is granted to copy, distribute and/or modify this document under the terms of either the MIT License (Expat) or the NodeBrain License.
@sp 1
@include ../../../doc/licenses.texi
@end copying

@iftex
@titlepage
@c @image{./image001,32pt,32pt,,gif}

@titlefont{Tree NodeBrain Module}
@sp 1
@tex
\vskip4pt \hrule height 3pt width \hsize
@end tex
@sp 3
@b{Release @value{RELEASE}}
@page
@vskip 0pt plus 1filll
@insertcopying

@c History Preface and Document Conventions 
@page
@b{History}

@multitable {-------------} {--------------------------------------------------------------------------------------------------------}
@item 2012-06-04 @tab
Title: @i{Tree NodeBrain Module}@*  
Author: Ed Trettevik <eat@@nodebrain.org>@*
Publisher: NodeBrain Open Source Project

@item 2012-06-04 @tab
Release 0.8.10
@itemize @bullet
@item This is a first edition.
@end itemize

@end multitable

@page
@b{Preface}

@sp 1
This manual is intended for users of the Tree NodeBrain Module, a plug-in for storing a table of data in main memory.
The reader is expected to be familiar with the basic concepts of NodeBrain.  See www.nodebrain.org for general information
on NodeBrain.

@include conventions.texi

@end titlepage

@end iftex

@c ----------------------------------------------------------
@c Not printed document

@ifnottex
@node Top
@top Tree NodeBrain Module

This manual is for the Tree NodeBrain Module (version @value{VERSION}, @value{UPDATED-MONTH}) used to store a table of data in main memory.
@*@*
Copyright @copyright{} 2014 Ed Trettevik <eat@@nodebrain.org>
@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of either the MIT License (Expat) or NodeBrain License.
See the @i{Licenses} section at the end of this document for details.
@end quotation
@ifnotplaintext
@b{Short Table Of Contents}
@menu
* Concepts:: Foundation
* Tutorial:: Introduction by Example
* Commands:: Syntax and Semantics
* Triggers:: Conditions and Response
@end menu
@menu
* Licenses::
* Index::
@end menu
@end ifnotplaintext
@end ifnottex

@c Set page footings
@oddfooting @thistitle @| @| @thispage
@evenfooting @thispage @| @| @thistitle

@c Contents
@oddheading @| @| 
@evenheading @| @|
@contents

@c Set page headings for document
@oddheading @thischapter @| @| @value{UPDATED-MONTH}
@evenheading @value{UPDATED-MONTH} @| @| @thischapter

@node Concepts
@chapter Concepts
@cindex Concepts

The Tree module provides a node with the skill to store information in a simple tree structure in main memory.  We define a Tree node as follows.  

@cartouche
@smallexample
define table1 node tree;
define table2 node tree;
@end smallexample
@end cartouche

When assertions are made to a Tree node, it simply stores the asserted values.

@cartouche
@smallexample
assert table1(1,3,5,"abc"),table1(1,3,6,"xyz");
@end smallexample
@end cartouche

To evaluate node conditions, the node module does a lookup on the tree.

@cartouche
@smallexample
define r1 on(x and y);
assert a=1,b=3;
assert x==table1(a,b); # x is 1 (true) because node (1,3) is present
@end smallexample
@end cartouche

You might expect the value of a Tree node condition to be False (0) when the specified node has not been asserted.  Instead the value is Unknown.

@cartouche
@smallexample
assert b=4;    # This makes x Unknown
@end smallexample
@end cartouche

A false value can be assigned to a node.

@cartouche
@smallexample
assert !table1(a,b);	# table1(1,4) is now False
@end smallexample
@end cartouche

To remove an entry from a tree, you assert it to be Unknown.

@cartouche
@smallexample
assert ?table1(a,b);	# table1(1,4) is now Unknown
@end smallexample
@end cartouche

You may actually assign any value to a tree entry.

@cartouche
@smallexample
assert table1(a,b)=25;	# table1(1,4) is now 25
assert table1(a,b)="abc";	# table1(1,4) is now .abc.
assert table1(a,b)=a+b;	# table1(1,4) is now 5
assert table1(a,b)=1;	# table1(1,4) is still True
assert table1(a,b)=0;	# table1(1,4) is now False
assert table1(a,b)=??;	# table1(1,4) is now Unknown
@end smallexample
@end cartouche

A node module is not required to fully implement the NodeBrain model.  For example, the Tree module does not properly implement the association of a definition with a tree entry.  That is, .assert table1(1,2,3)==a*b;. will not work the way you might hope.

We have shown how values are asserted to a table implemented by the Tree skill.  Now let.s look at how we might reference the table in conditions.  We just mentioned a limitation.  If tree entries are given definitions, our conditions will not respond as one might hope.  (This would require a minor enhancement to our node module.)  Otherwise, we can expect a tree node condition to take on the value of the currently referenced row.

@cartouche
@smallexample
define r1 on(table(a,b));
define r2 on(!table(b,a));
define r3 on(?table(a,b));
assert a=1,b=4;
assert table(a,b),!table(b,a);	# rules r1 and r2 fire
assert ?b;				# rule r3 fires
assert b=4;				# rules r1 and r2 fire
assert ?table(1,4);			# rule r3 fires
@end smallexample
@end cartouche
	
Notice that an assertion takes the values of the argument cell expressions at the time of assertion, but a condition .monitors. the value of these cells.  In our example above the cell expressions are simple terms (.a. and .b.).  Changes to the values of these terms change the table entry being referenced by the condition.  Changes to the table entries will also change the value of the condition.
@*@*
In an actual application, you might use tree node tables for classification.  For example, one might create a table of web server host names and reference it in an event monitoring IF rule.

@cartouche
@smallexample
define webserver node tree;
assert webserver("happy.web.mycompany.com");
assert webserver("lucky.web.mycompany.com");

define r1 if(webserver(server) and event="abc"):action
	
# The following alert will cause r1 to fire
alert event="abc",server="lucky.web.mycompany.com";
@end smallexample
@end cartouche

You may notice that this is no different than a cache with no expiration interval.  However, values can not currently be assigned to cache entries, so the following would not be possible with a cache.

@cartouche
@smallexample
define serverGroup node tree.tree;
assert serverGroup("lucky.web.mycompany.com")="webServer";
assert serverGroup("dns1.mycompany.com")="dnsServer";

define r1 if(serverGroup(server)="webServer" and event="abc"):action

# The following alert will cause r1 to fire
alert event="abc",server="lucky.web.mycompany.com";
@end smallexample
@end cartouche

It is also important to understand that a cache uses the .closed world. assumption, returning False when an entry is not asserted while a tree returns Unknown.  A tree only returns False when an entry has been asserted to be False.  For this reason, you test for existence in a tree node table using the "?" operator, but use "!" when testing for existence in a cache node table.

@cartouche
@smallexample
define cacheTable node cache:(s);
define treeTable node tree;

# take action if server is not in either table
define r1 if(!cacheTable(server) and ?treeTable(server)):action
@end smallexample
@end cartouche

The cache and tree skills are not aware of the operators we are using here.  We are simply choosing the appropriate operator based on our awareness of what value these skills return when an entry is not defined---cache returns False (0) and tree returns Unknown (?)

@node Tutorial
@chapter Tutorial
@cindex tutorial
@include nb_tree_tutorial.texi

@node Commands
@chapter Commands
@cindex commands

This section describes commands used with a Tree node.
 
@section Define
@cindex define command

The @command{define} command is used to create a Tree node.
 
@cartouche
@b{Syntax}
@multitable {---------------------} {----------------------------------------------------------------------}
@item @i{treeDefineCmd} @tab ::= @b{define} @v{s} @i{term} @v{s} @b{node} [@v{s}@i{treeDef} ] @bullet{} 	   
@item @i{treeDef}       @tab ::= @b{tree} [ : @i{option} ]
@item @i{option}        @tab ::= @b{order} | @b{partition}
@end multitable
@end cartouche

@*
Tree nodes are most often defined with no parameters.
The @code{order} option is used when you plan to write the tree
to a file using the @code{store} command. 
The @code{partition} option is used to define values for
blocks of key values.

@cartouche
@smallexample
define tree node tree;
define tree node tree:order;       # store values in order
define tree node tree:partition;   # associate values to key ranges
@end smallexample
@end cartouche

@section Assert and Alert
@cindex assertions
@cindex assert command
@cindex alert command

The Tree module supports assertions within @code{assert} or @code{alert} commands.
@cartouche
@smallexample
assert @i{node}(@i{arg1}[,@i{arg2},...])[=@i{value}];
@end smallexample
@end cartouche
If an unkown value ("?") is assigned, the element is removed.

@section Cell Expressions
@cindex cell
@cindex cell expression
@cindex evaluation

When a Tree node is referenced in a cell expression, it presents the value of the specified element.
The example shows a reference within a cell expression of a simple @code{define} statement.

@cartouche
@smallexample
define @i{term} cell @i{node}(@i{arg1}[,@i{arg2},...]);  # term has value of specified element
@end smallexample
@end cartouche


@section Node Commands
@cindex node commands

This section describes commands implemented by the Tree module for use with defined nodes.

@cartouche
@smallexample
@i{node}[(@i{arg1}[,@i{arg2},...])]:@i{verb} [@i{arguments}]
@end smallexample
@end cartouche

@subsection Balance
@cindex balance

The @code{balance} command is used to rebalance the trees within a Tree node after @code{flatten} or @code{prune} commands have made the trees unbalanced.

@cartouche
@smallexample
@i{node}:balance
@end smallexample
@end cartouche

@subsection Flatten
@cindex flatten

The @code{balance} command is used to completely unbalance the trees within a Baseline node so they effectively become lists.

@cartouche
@smallexample
@i{node}:flatten
@end smallexample
@end cartouche

@subsection Prune
@cindex prune

The @code{prune} command is used to remove elements from a Baseline node.

@cartouche
@smallexample
@i{node}[(@i{arg1}[,@i{arg2},...])]:prune
@end smallexample
@end cartouche

Unlike an assertion that an element is unknown, which removes the identified element and the subordinate tree, the @code{prune} command only removes the subordinate tree.  Using a table model, it deletes the subordinate table, emptying the cells to the right of the identified cell and deleting all rows represented by the subordinate table.

@subsection Store
@cindex store

The @code{store} command is used to write the current measures within a Baseline node to a file in the form of assertions.

@cartouche
@smallexample
assert (@i{arg1}[,@i{arg2},...])=@i{value};
...
@end smallexample
@end cartouche

The node name is not included in the assertions.  This enables the assertions to be easily applied to a different node---perhaps not even a Baseline node.

@subsection Trace
@cindex trace

The @code{trace} command is used to toggle the @code{trace} option for troubleshooting.
@cartouche
@smallexample
@i{node}:trace [on|off]
@end smallexample
@end cartouche

@section Module Commands
@cindex module commands

The Tree module currently implements no module level commands.


@node Triggers
@chapter Triggers
@cindex triggers

The Tree module does not implement any triggers.  It is intended only for looking stuff up.
See the Baseline and Cache modules as examples similar to the Tree module with triggers.

@ifnottex
@node Licenses
@unnumbered Licenses

NodeBrain is free software; you can modify and/or redistribute it, including this document, under the
terms of either the MIT License (Expat) or the NodeBrain License.

@sp 1
@include ../../../doc/licenses.texi
@end ifnottex

@node Index
@unnumbered Index 
@printindex cp 
@bye 

