@c Peer tutorial
@c   A section to the NodeBrain Tutorial and Peer Nodebrain Module docs.

@quotation
@i{The more elaborate our means of communication, the less we communicate.}
---Joseph Priestly (1733--1804)
@end quotation
  
The peer module is more elaborate than some of the other modules used for communication.  The goal is to communicate less, or at least to be more selective in with whom you communicate.  This selectivity is accomplished with encryption and key-based authentication.

The files for this tutorial are in the @code{tutorial/Peer} directory.  The NodeBrain scripts are executable and I have left off the @code{.nb} suffix for fun.

@section Peer Module Identity Keys

Before you communicate using the peer module, you must create keys to be used by clients and servers.  To reduce complexity for this example, you'll create a single key and use it for both the client and the server as a "shared secret" key.  Here's a script called @code{genkey} that creates a key for an identity called @code{buddy}.

@cartouche
@smallexample
#!/usr/local/bin/nb
# File: tutorial/Peer/genkey
@b{define myService node peer.service;}
@b{myService:identify buddy;}
@end smallexample
@end cartouche

The peer module provides a skill called @code{service} that supports some helpful commands associated with peer communication.
Use the @code{identify} command here.
This command generates a key and places it in a key store for later reference.

@multitable {----------------------} {----------------------------------------------------------------------------------}
@item Unix and Linux: @tab @code{~/.nb/nb_peer.keys}
@item Windows: @tab @code{USER_PROFILE/ApplicationData/NodeBrain/nb_peer.keys}
@end multitable

The key store is readable only by the owning user and looks like this.

@cartouche
@smallexample
$ cat @b{~/.nb/nb_peer.keys}
foo 3.3788e45e8f64776b.0.0;
bar 7.b49ad9bfb68a97b8.fab67908064b5cb3.0;
@b{buddy 3.be5d8bc4465d3aa7.bd6107c786f72c15.0;}
@end smallexample
@end cartouche

@section Peer Module Server Node

@quotation
@i{Be alert to give service.  What counts a great deal in life is what we do for others.}
---Anonymous
@end quotation

A peer server node is alert to give service, in fact, it can even give service to alerts.
It provides a method for a peer client to send any command to a NodeBrain agent: alerts, assertions, new rule definitions, and so on.
It accepts TCP/IP socket connections from clients and issues received commands in the context of the server node.  The @code{server} file in the @code{tutorial/Peer} directory looks like this.

@cartouche
@smallexample
#!/usr/local/bin/nb -d
# File: tutorial/Peer/server
-rm server.log
set out=".",log="server.log";
@b{declare buddy identity owner;}
@b{define myServer node peer.server("buddy@@./socket");}         # Unix domain
#define myServer node peer.server("buddy@@127.0.0.1:12345");  # local
#define myServer node peer.server("buddy@@0.0.0.0:12345");    # remote
myServer. define r1 on(a=1 and b=2);
@end smallexample
@end cartouche

Declare an identity @code{buddy} that you rank as @code{owner}. This is all the interpreter knows about @code{buddy}.  Use this same name, @code{buddy}, in the specification of the peer server node.  The peer node module requires that a key exist in the key store for this identity, which is why you created it in the previous section.

Let's start up the peer server.  

@cartouche
@smallexample
$ ./server
2008/06/11 10:27:58 NB000I Argument [1] -d
2008/06/11 10:27:58 NB000I Argument [2] ./server
> #!/usr/local/bin/nb -d
> # File: tutorial/Peer/server
> -rm server.log
[20642] Started: -rm server.log
[20642] Exit(0)
> setout=".",log="server.log";
2008/06/11 10:27:58 NB000I NodeBrain nb will log to server.log
> declare buddy identity owner;
> @b{define myServer node peer.server("buddy@@./socket");}         # Unix domain
2008/06/11 10:27:58 NB000I Peer keys loaded.
> #define myServer node peer.server("buddy@@127.0.0.1:12345"); # local
> #define myServer node peer.server("buddy@@0.0.0.0:12345");   # remote
> myServer. define r1 on(a=1 and b=2);
2008/06/11 10:27:58 NB000I Source file "./server" included. size=493
2008/06/11 10:27:58 NB000I NodeBrain nb[20641,19542]daemonizing
$
@end smallexample
@end cartouche

You are using a Unix domain socket in this tutorial because you don't need to communicate with remote clients.
To experiment with serving remote clients, you can comment out the active @code{myServernode} and uncomment the remote myServer node.
But first you should experiment with the client in the next section.

@section Peer Module Client Node

@quotation
@i{He who is always his own counselor will often have a fool for his client.}
---Hunter S. Thompson (1937--2005)
@end quotation

The peer module enables NodeBrain to play the part of both server and client.  This is not foolish because I am talking about different instances of NodeBrain, different processes ("skulls"), playing the roles of client and server.

The @code{client} file in the @code{tutorial/Peer} directory looks like this.

@cartouche
@smallexample
#!/usr/local/bin/nb
# File: tutorial/Peer/client
@b{declare buddy identity;}
@b{define myClient node peer.client("buddy@@./socket");}         # Unix domain
#define myClient node peer.client("buddy@@localhost:12345"); # local
#define myClient node peer.client("buddy@@myhost.mydomain:12345"); # remote
@b{myClient:assert a=1,b=2;}
@b{myClient:stop;}
@end smallexample
@end cartouche

Notice you declare the identity @code{buddy} and specify the client just like you specified the server in the previous section.  Here there is no requirement to give @code{buddy} local permissions.  

Because you are going to run this client on the same machine as the server and under the same user account, the client and server will use the same key store.
To run the client from a different account or machine, you would have to copy the @code{buddy} key from the server's key store to the client's key store.
You could also configure different private keys for servers and clients and copy their public keys to the key stores of their peers.  That approach provides better security, but quick success in this tutorial is more important, so stick with shared secret keys.

Now you can run the client and see what happens.

@cartouche
@smallexample
$ ./client
2008/06/11 10:28:00 NB000I Argument [1] ./client
> #!/usr/local/bin/nb
> # File: tutorial/Peer/client
> declare buddy identity;
> @b{define myClient node peer.client("buddy@@./socket");}         # Unix domain
> #define myClient node peer.client("buddy@@localhost:12345"); # local
> #define myClient node peer.client("buddy@@myhost.mydomain:12345"); # remote
> @b{myClient:assert a=1,b=2;}
2008/06/11 10:28:00 NB000I Peer keys loaded.
2008/06/11 10:28:00 NB000I Peer b0000=buddy@@./socket
2008/06/11 10:28:00 NB000I @b{Rule myServer.r1 fired}
> @b{myClient:stop;}
2008/06/11 10:28:00 NB000I Peer b0000=buddy@@./socket
2008/06/11 10:28:00 NB000I Source file "./client" included. size=450
2008/06/11 10:28:00 NB000I NodeBrain nb[20644] terminating- exit code=0
$
@end smallexample
@end cartouche

The command @code{myClient:assert a=1,b=2} sends the command @code{assert a=1,b=2} to the server specified as @code{buddy@@./socket}.  Notice the message @code{Rule myServer.r1 fired}.
There is no @code{myServer.r1} defined in the client.  This is what happened at the server.  When a peer client issues a command to a peer server, the server lets the client listen in as it reacts to the command.  You can look at it from the server's point of view by displaying the agent log, in this case called @code{server.log}.

@cartouche
@smallexample
$ @b{cat server.log}
  
N o d e B r a i n   0.9.02 (Columbo) 2014-02-15

Compiled Jun 12 2014 19:20:12 x86_64-unknown-linux-gnu

Copyright (C) 2014 Ed Trettevik <eat@@nodebrain.org>
MIT or NodeBrain License
----------------------------------------------------------------
  
nb -d ./server

Date       Time     Message
---------- ----------------------------------------------------
2014-06-11 10:27:58 NB000I NodeBrain nb[20643:1] myuser@@myhost
2014-06-11 10:27:58 NB000I Agent log is server.log
2014-06-11 10:27:58 NM000I peer.server myServer: @dots{}
@dots{} Listening for NBP connections as buddy@@./socket
2014-06-11 10:28:00 NM000I peer.server myServer: buddy@@./socket
> myServer. @b{assert a=1,b=2;}
2014-06-11 10:28:00 NB000I @b{RulemyServer.r1 fired}
2014-06-11 10:28:00 NM000I peer.server myServer: buddy@@./socket
> myServer. @b{stop;}
2014-06-11 10:28:00 NB000I NodeBrain nb[20643] terminating - exit code=0
$
@end smallexample
@end cartouche

At 10:27:58 the server started listening for connections. At 10:28 it received a connection and issued the command @code{assert a=1,b=2} in the @code{myServer} context.  This triggered rule @code{myServer.r1}, which has no action.  In previous tutorials, you've learned enough to modify the rules in server to provide an action and try it again.

Notice the client sends a @code{stop} command to the server, which stops it because you've given the client full owner permissions.  This means you have to restart the server each time you run the client.  Only in a tutorial would you do something this silly.

@section Interactive Peer Module Client

If you want to experiment further with the peer module, restart the server and try the @code{iclient} file instead of @code{client}.

@cartouche
@smallexample
$ ./server
$ ./iclient
@end smallexample
@end cartouche

The @code{iclient} script looks like this.

@cartouche
@smallexample
#!/usr/local/bin/nb -`myClient:
# File: iclient
declare buddy identity;
define myClient node peer.client("buddy@@./socket");         # Unix domain
@end smallexample
@end cartouche

The strange looking she-bang ("#!") line has an argument that supplies an interactive command prefix and enables an option to automatically go into interactive mode after processing all command arguments.  This step causes your prompt to look like this.

@cartouche
@smallexample
myClient:> 
@end smallexample
@end cartouche

Any command you enter is now prefixed by the value @code{myClient:}, causing all your commands to be directed to your peer client node, which sends them to your peer server.
Enter the highlighted text when prompted to get the same results as shown below.

@cartouche
@smallexample
$ ./iclient
2008/06/11 16:48:39 NB000I Argument [1] -'myClient:
> #!/usr/local/bin/nb -'myClient:
> # File: tutorial/Peer/iclient
> declare buddy identity;
> define myClient node peer.client("buddy@@./socket");         # Unix domain
2008/06/11 16:48:39 NB000I Source file "./iclient" included. size=209
2008/06/11 16:48:39 NB000I Reading from standard input.
---------- --------
myClient:> @b{show r1}
2008/06/11 16:48:45 NB000I Peer keys loaded.
2008/06/11 16:48:45 NB000I Peer b0000=buddy@@./socket
> myServer. show r1
r1 = ! == on((a=1)& (b=2));
myClient:> @b{assert a=1,b=2;}
2008/06/11 16:49:10 NB000I Peer b0000=buddy@@./socket
> myServer. assert a=1,b=2;
2008/06/11 16:49:10 NB000I Rule myServer.r1 fired
myClient:> @b{'foo.}
foo.> @b{'}
> @b{quit}
2008/06/11 16:49:15 NB000I NodeBrain nb[23715] terminating - exit code=0
$
@end smallexample
@end cartouche

This example illustrates how a single quote at the beginning of an interactive command can be used to change the command prefix.

The little tricks illustrated in this section are features of the interpreter, not the peer module, but when combined with the peer module make it a bit easier to use NodeBrain as a primitive interactive client to a NodeBrain agent.

