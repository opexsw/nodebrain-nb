#!bin/nb
~ > #!bin/nb
declare toy module {"../.libs"}; # for checking only
~ > declare toy module {"../.libs"}; # for checking only
define sum node toy.sum;
~ > define sum node toy.sum;
define add node toy.add;
~ > define add node toy.add;
assert a=1,b=2;
~ > assert a=1,b=2;
define countAandB node toy.count(a and b);
~ > define countAandB node toy.count(a and b);
show +m;
~^

define r1 on(a=add(b,c))[1];
~ > define r1 on(a=add(b,c))[1];
define r2 on(a=sum(c,b))[2];
~ > define r2 on(a=sum(c,b))[2];
define r3 on(countAandB=3)[3];
~ > define r3 on(countAandB=3)[3];

assert a=1,b=2,c=3;
~ > assert a=1,b=2,c=3;
show countAandB;
~ > show countAandB;
~ countAandB = 1 == node toy.count((a&b))
~ counter 1
assert !a,c;
~ > assert !a,c;
show countAandB;
~ > show countAandB;
~ countAandB = 1 == node toy.count((a&b))
~ counter 1
assert a=3;
~ > assert a=3;
~ 1970-01-01 00:00:01 NB000I Rule r1 fired 
~ 1970-01-01 00:00:02 NB000I Rule r2 fired 
show countAandB;
~ > show countAandB;
~ countAandB = 2 == node toy.count((a&b))
~ counter 2
assert !a,c=0;
~ > assert !a,c=0;
show countAandB;
~ > show countAandB;
~ countAandB = 2 == node toy.count((a&b))
~ counter 2
assert a=2;
~ > assert a=2;
~ 1970-01-01 00:00:01 NB000I Rule r1 fired 
~ 1970-01-01 00:00:02 NB000I Rule r2 fired 
~ 1970-01-01 00:00:03 NB000I Rule r3 fired 
show -t
~ > show -t
~ _ = # == node 
~ a = 2
~ add = 0 == node toy.add
~ b = 2
~ c = 0
~ countAandB = 3 == node toy.count((a&b))
~ r1 = # !! == on(a=add(b,c))[1];
~ r2 = # !! == on(a=sum(c,b))[2];
~ r3 = # !! == on(countAandB=3)[3];
~ sum = 0 == node toy.sum
assert !a;
~ > assert !a;
assert a=1;
~ > assert a=1;
show -t
~ > show -t
~ _ = # == node 
~ a = 1
~ add = 0 == node toy.add
~ b = 2
~ c = 0
~ countAandB = 4 == node toy.count((a&b))
~ r1 = # ! == on(a=add(b,c))[1];
~ r2 = # ! == on(a=sum(c,b))[2];
~ r3 = # ! == on(countAandB=3)[3];
~ sum = 0 == node toy.sum
