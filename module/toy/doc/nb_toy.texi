\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename nb_toy.info
@include version.texi
@settitle Toy NodeBrain Module
@c %**end of header

@finalout
@paragraphindent none
@setchapternewpage odd

@copying
Toy NodeBrain Module@*
June 2014@*
NodeBrain Open Source Project

@sp 2
@b{Release 0.8}

Author: Ed Trettevik <eat@@nodebrain.org>

Copyright @copyright{} 2011-2014 Ed Trettevik <eat@@nodebrain.org>

@sp 1
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section titled @i{GNU Free Documentation License} preceding the index at the end of this document.

@sp 1
All trademarks and registered trademarks referenced in this document are the trademarks of their respective owners.

@sp 2
@b{Software License}

Copyright @copyright{} 1998--2014 Ed Trettevik <eat@@nodebrain.org>

NodeBrain is free software; you can redistribute it and/or  modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option)any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License formore details.

You should have received a copy of the GNU General PublicLicense along with this program; if not, write to Free Software Foundation,Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
@end copying

@iftex
@titlepage
@c @image{./image001,32pt,32pt,,gif}

@titlefont{Toy NodeBrain Module}
@sp 1
@tex
\vskip4pt \hrule height 3pt width \hsize
@end tex
@sp 3
@b{Release @value{VERSION}}
@page
@vskip 0pt plus 1filll
@insertcopying

@c History Preface and Document Conventions 
@page
@b{History}

@multitable {-------------} {--------------------------------------------------------------------------------------------------------}
@item 2005-10-12 @tab
Title: @i{NodeBrain  Tutorial}@*  
Author: Ed  Trettevik <eat@@nodebrain.org>@*
Publisher: NodeBrain Open Source Project

@item 2010-12-31 @tab
Release 0.8.3
@itemize @bullet
@item Updates - still needed
@end itemize

@end multitable

@page
@b{Preface}

@sp 1
This module is intended for readers seeking an introduction to NodeBrain through a series of simple examples. Other documents are available for readers looking for a more complete reference to the rule language, modules, or API (application programmatic interface).

The intent of the examples is to illustrate individual concepts, not to provide complete working applications or show all related options. We avoid formal syntax descriptions, thinking you are here because you want to figure it out from examples.  

See www.nodebrain.org for more information and the latest update to this document.

@sp 2
@b{Documents}
@sp 1
@quotation
@i{NodeBrain Tutorial}

@i{NodeBrain User Guide}

@i{NodeBrain Language Reference}

@i{NodeBrain Module Reference}

@i{NodeBrain API Reference}
@end quotation

@sp 2
@b{Document Conventions}
@sp 1
Sample code and input/output examples are displayed in a monospace font, indented in HTML and Info, and enclosed
in a box in PDF or printed copies.
Bold text is used to bring the reader's attention to specific portions of an example.
In the following example, the first and last line are associated with the host shell and the lines in between are input or output unique to NodeBrain.
The @code{define} command is highlighted, indicating it is the focus of the example.
Lines starting with "@dots{}" are a continuation of the previous line ending with "@dots{}".
This is not part of the language, just one way of breaking up single lines to fit on a printed page.
If you copy an example, you must remove the dots and combine the lines into a single line.

@example
$ nb
> @b{define myFirstRule on(a=1 and b=2) mood="happy";}
> assert mood="sad";
> show mood
mood = "sad"
> assert a=1,b=2,c=3,d="This is an example of a long single line that", @dots{}
@dots{} e="we depict on multiple lines to fit on the documnet page";
2008/06/05 12:09:08 NB000I Rule myFirstRule fired(mood="happy")
> show mood
mood = "happy"
> quit
$
@end example

@end titlepage

@end iftex

@c ----------------------------------------------------------
@c Not printed document

@ifnottex
@node Top
@top NodeBrain Tutorial @value{VERSION}

This tutorial is for NodeBrain (version @value{VERSION}, @value{UPDATED}), an open source agent for state and event monitoring.

Copyright @copyright{} 2006--2014 Ed Trettevik <eat@@nodebrain.org>

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section titled @i{GNU Free Documentation License} preceding the index at the end of this document.
@end quotation

@ifnotplaintext
@b{Rule Engine Tutorials}
@end ifnotplaintext
@menu
@end menu

@ifnotplaintext
@b{Node Module Tutorials}
@end ifnotplaintext
@menu
@end menu

@ifnotplaintext
@b{References}
@end ifnotplaintext
@menu
* GNU Free Documentation License::
* Index::
@end menu
@end ifnottex

@c Set page footings
@oddfooting @thistitle @| @| @thispage
@evenfooting @thispage @| @| @thistitle

@c Contents
@oddheading @| @| 
@evenheading @| @|
@contents

@c Set page headings for document
@oddheading @thischapter @| @| @value{UPDATED-MONTH}
@evenheading @value{UPDATED-MONTH} @| @| @thischapter
@section Toy Module
@cindex toy module


The Toy module is only included in the distribution as an example for programmers writing their own node modules. It is simple in function to keep the example code simple, making it of little value for application.

This module provides three trivial skills: Sum, Add, and Count. Actually, Add is just an alias for Sum, illustrating how multiple skills can share methods. The following two files should have come with your distribution for experimenting with the Toy skills.

@example	
	#!/usr/local/bin/nb
	# toyRules.nb
	declare toy module /usr/local/lib/nb_toy.so;     
	declare sum skill toy.sum;
	declare count skill toy.count;

	define sum node sum;
	define add node toy.add;
	# Try uncommenting the following line if rule r2 does not file
   	# using the events in toyEvents.nb
	# assert a=0;
	define aisoneCounter node count(a=1);
	define aistrueCounter node count(a);

	define r1 on(sum(a,b)>5 and add(a,b,c)<20);
	define r2 on(aisoneCounter>2);
	define r3 on(aistrueCounter>2);
	----------------------------------------------------------------------------
	# toyEvents.nb 
	assert a=1,b=2,c=3;
	assert a=0;
	assert a=10;	# r1 should fire
	assert a=0;
	assert a=1;    # r3 should fire
	assert a=0;
	assert a=1;	# r2 should fire
	assert a=5;	# r1 should fire
	show aisoneCounter;
	assert aisoneCounter()=0;      # reset counter */
	show aisoneCounter;
@end example
You can run a test with either of the following commands.

@example
	./toyRules.nb toyEvents.nb
	    -or-
	nb toyRules.nb toyEvents.nb
@end example

Now what’s going on here? The Sum and Add skills compute the sum of numeric arguments plus the sum of the lengths of string arguments. When an argument changes, the node conditions sum(a,b) and add(a,b,c) are reevaluated to adjust their values. This changes the rule condition for r1, causing it to fire each time the condition transitions to true.

The Count skill increments a counter every time the condition specified in the node definition transitions to true. As the aisoneCounter in the sample rules increments, the r2 rule condition is reevaluated. When it transitions to True, r2 fires. The strange looking assertion aisoneCounter()=0 is used to reset the counter. This skill ignores arguments to an assertion, using only the assigned value to set the counter. The following strange assertions are also possible.

@example
	assert aisoneCounter();	# set counter to 1  (True)
	assert !aisoneCounter();	# set counter to 0  (False)
	assert aisoneCounter()=10; # set counter to 10
@end example

These sample skills are useful for illustrating the way a node module can add functionality to NodeBrain without modifying nb. However, they are not very impressive skills, and when you look at the source code you might wonder if the effort to create a node module is worth the benefit. But keep in mind, the complexity of the API calls is not proportional to the complexity of the skill you are implementing. Trivial examples like these have a much greater percent of overhead in the API. You can start with one of these examples and create a very useful node module without having to touch the API calls much---depending on your requirements. In most cases, the bulk of the complexity should be in the code you write to perform the internal function of the module, not in API calls to NodeBrain.

@node GNU Free Documentation License
@unnumbered GNU Free Documentation License
@include fdl.texi

@node Index
@unnumbered Index
@printindex cp
@bye  
