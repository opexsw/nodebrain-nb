@c Cache tutorial
@c   A section to the NodeBrain Tutorial and Cache Nodebrain Module docs.

@quotation
@i{There is a measure in everything. There are fixed limits beyond which and short of which right cannot find a resting place.}
---Horace (65 BC--8 BC)
@end quotation

A cache node, like a tree node, provides a place to remember events as associations, or relations.
But a cache adds to this the ability to measure repetition and variation within intervals of time and respond when predefined limits are reached.
It enables you to detect patterns of events that can be described as follows: 

@itemize @bullet
@item X happened N times within time period P or interval I.
@item X was associated with Y in N events within time period P or interval I.
@item X was associated with N different values of Y within time period P or interval I. 
@item X happened within interval I after Y happened.
@end itemize

Here X and Y represent the values of a set of one or more event attributes (A, B, C, ...).  For example, X might represent a (type, city) tuple while Y represents a (customer, item, quantity) tuple.
If you think of a cache as a table, which is sometimes a good way to visualize it, a @i{tuple} is just a table row.
If you think of a cache as a table-of-tables, a better way to visualize it, then Y is a row in a table associated with row X.

@section Thresholds

Here's a 24-hour cache node with four thresholds and four rules to respond when they are reached.
@cartouche
@smallexample
#!/usr/local/bin/nb
# File: tutorial/cache/cache.nb
@b{define horace node cache:(~(24h):type(20),city@{10@}[5],customer,item,quantity(3));}
horace. define r1 if(type._hitState): $ # There have been $@{type._hits@} $@{type@} events
horace. define r2 if(city._rowState): \
  $ # ($@{type@},$@{city@}) had $@{city._rows@} different events
horace. define r3 if(city._kidState): \
  $ # ($@{type@},$@{city@}) had $@{city._kids@} different customers
horace. define r4 if(quantity._hitState): \
  $ # ($@{type@},$@{city@},$@{customer@},$@{item@},$@{quantity@}) happened $@{quantity._hits@} times
@end smallexample
@end cartouche

Here's a set of events represented as assertions to the 24-hour cache node named "horace."
@cartouche
@smallexample
# File: tutorial/cache/events.nb
horace. assert ("purchase","Paris","Bruno","iPod",5);
horace. assert ("purchase","Paris","Bruno","iPod",5);
horace. assert ("purchase","Paris","Bruno","iPod",5);
horace. assert ("purchase","Paris","Bruno","shirt",2);
horace. assert ("purchase","Paris","Bruno","shoes",1);
horace. assert ("purchase","Paris","Madeleine","shoes",5);
horace. assert ("purchase","Paris","Madeleine","skirt",1);
horace. assert ("purchase","Paris","Madeleine","bread",2);
horace. assert ("purchase","Paris","Jeannine","bread",1);
horace. assert ("purchase","Paris","Laure","bread",1);
horace. assert ("purchase","Paris","Henri","iPod",1);
horace. assert ("return","Paris","Henri","iPod",1);
horace. assert ("return","Paris","Madeleine","iPod",1);
horace. assert ("purchase","London","Abigail","milk",1);
horace. assert ("purchase","London","Addie","bread",1);
horace. assert ("purchase","London","Alston","bread",1);
horace. assert ("purchase","London","Alston","candy",1);
horace. assert ("purchase","London","Alston","candy",2);
horace. assert ("purchase","London","Alston","candy",3);
horace. assert ("purchase","London","Alston","candy",4);
horace. assert ("purchase","London","Alston","candy",5);
horace. assert ("purchase","London","Alston","candy",6);
horace. assert ("purchase","London","Alston","candy",7);
horace. assert ("purchase","London","Alston","candy",8);
horace. assert ("purchase","London","Alston","candy",9);
@end smallexample
@end cartouche

Here's a sample execution.
@cartouche
@smallexample
$ ./cache.nb events.nb
2009/01/31 09:10:04 NB000I Argument [1] ./cache.nb
> #!/usr/local/bin/nb
> # File: tutorial/cache/cache.nb
@b{> define horace node cache:(~(24h):type(20),city@{10@}[5],customer,item,quantity(3));}
> horace. define r1 if(type._hitState): \
  $ # There have been $@{type._hits@} $@{type@} events
> horace. define r2 if(city._rowState): \
  $ # ($@{type@},$@{city@}) had $@{city._rows@} different events
> horace. define r3 if(city._kidState): \
  $ # ($@{type@},$@{city@}) had $@{city._kids@} different customers
> horace. define r4 if(quantity._hitState): \
  $ # ($@{type@},$@{city@},$@{customer@},$@{item@},$@{quantity@}) happened $@{quantity._hits@} times
2014-07-20 22:04:46 NB000I Source file "./cache.nb" included. size=537
2014-07-20 22:04:46 NB000I Argument [2] events.nb
> # Filte: tutorial/cache/events.nb
> horace. assert ("purchase","Paris","Bruno","iPod",5);
> horace. assert ("purchase","Paris","Bruno","iPod",5);
> horace. assert ("purchase","Paris","Bruno","iPod",5);
2014-07-20 22:04:46 NB000I Rule horace.r4 fired 
: horace. @b{# (purchase,Paris,Bruno,iPod,5) happened 3 times}
> horace. assert ("purchase","Paris","Bruno","shirt",2);
> horace. assert ("purchase","Paris","Bruno","shoes",1);
> horace. assert ("purchase","Paris","Madeleine","shoes",5);
> horace. assert ("purchase","Paris","Madeleine","skirt",1);
> horace. assert ("purchase","Paris","Madeleine","bread",2);
> horace. assert ("purchase","Paris","Jeannine","bread",1);
> horace. assert ("purchase","Paris","Laure","bread",1);
> horace. assert ("purchase","Paris","Henri","iPod",1);
2014-07-20 22:04:46 NB000I Rule horace.r3 fired 
: horace. @b{# (purchase,Paris) had 5 different customers}
> horace. assert ("return","Paris","Henri","iPod",1);
> horace. assert ("return","Paris","Madeleine","iPod",1);
> horace. assert ("purchase","London","Abigail","milk",1);
> horace. assert ("purchase","London","Addie","bread",1);
> horace. assert ("purchase","London","Alston","bread",1);
> horace. assert ("purchase","London","Alston","candy",1);
> horace. assert ("purchase","London","Alston","candy",2);
> horace. assert ("purchase","London","Alston","candy",3);
> horace. assert ("purchase","London","Alston","candy",4);
> horace. assert ("purchase","London","Alston","candy",5);
> horace. assert ("purchase","London","Alston","candy",6);
2014-07-20 22:04:46 NB000I Rule horace.r1 fired 
: horace. @b{# There have been 20 purchase events}
> horace. assert ("purchase","London","Alston","candy",7);
2014-07-20 22:04:46 NB000I Rule horace.r2 fired 
: horace. @b{# (purchase,London) had 10 different events}
> horace. assert ("purchase","London","Alston","candy",8);
> horace. assert ("purchase","London","Alston","candy",9);
2014-07-20 22:04:46 NB000I Source file "events.nb" included. size=1441
2014-07-20 22:04:46 NB000I NodeBrain nb[4608] terminating - exit code=0
$
@end smallexample
@end cartouche

Okay, now why did rules @code{r1}, @code{r2}, @code{r3}, and @code{r4} fire when they did?
Each time a tuple is asserted to the cache, it updates a tree-of-trees structure as needed to retain the full set of asserted tuples.
It also updates three counters at each node within the tree-of-trees: hits, rows, and kids.
The cache module defines @i{hits} as the number of times an assertion arrives at a given node within the tree, @i{rows} as the number of subordinate table rows represented by the subordinate tree-of-trees, and @i{kids} as the number of directly subordinate nodes---or the number of unique values in the first column of the subordinate table.
In the definition of the "horace" cache node, you specify thresholds for hits using (), rows using @{@}, and kids using [].
When a threshold is reached, the cache node alerts itself.
The rules defined for the node handle the alerts.
In the example above, when @code{r4} fired, it was responding to an invisible alert that would look something like the following if it were not invisible.

@cartouche
@smallexample
horace. alert quantity._hitState,quantity._hits=3,type="purchase",city="Paris", \
  customer="Bruno",item="iPod",quantity=5;
@end smallexample
@end cartouche

This alert was triggered because the hit counter for the (@code{purchase,Paris,Bruno,iPod,5}) node in the cache reached the specified limit of 3 within a 24-hour interval.
See if you can figure out why rules @code{r1}, @code{r2}, and @code{r3} fired when they did.

In this example, the rules just issue comments.
In a real application, the rules would have taken action of some kind: an alert, assertion, alarm, shell command, and so on.

@section Tuple Expiration 

A tuple in a cache can be retained for a defined time interval (e.g., 24 hours in the example above), until the end of a period (e.g., end of current minute, hour, day), until some state is detected, or indefinitely.

@cartouche
@smallexample
# interval
define horace node cache:(@b{~(24h)}:type(20),city@{10@}[5],customer,item,quantity(3));
# end of period
define horace node cache@b{(~(d))}:(type(20),city@{10@}[5],customer,item,quantity(3));
# state a=1
define horace node cache@b{(a=1)}:(type(20),city@{10@}[5],customer,item,quantity(3));
# indefinitely
define horace node cache:(type(20),city@{10@}[5],customer,item,quantity(3));
@end smallexample
@end cartouche

You can also remove a tuple or set of tuples from a cache at any time.  The following command removes all tuples starting with (@code{"purchase","London"}).

@cartouche
@smallexample
horace. assert @b{?}("purchase","London");
@end smallexample
@end cartouche

In addition to alerting when a threshold is reached, you can direct a cache to alert when a tuple expires.  This enables us to assert a tuple to the cache and take action if you haven't asserted it again within the expiration period.  In other words, you can use a cache to know when something hasn't happened for some interval.

@cartouche
@smallexample
#!/usr/local/bin/nb
# File: tutorial/cache/tardy.nb
define tardy node cache:(@b{!}~(6s):Source);
tardy. define r1 if(_action="expire"): $ # $@{Source@} has been quiet for $@{_interval@}
tardy. assert ("Fred");
@end smallexample
@end cartouche

When executed below, you are notified when "Fred" has not been asserted to the cache for 6 seconds.
@cartouche
@smallexample
./tardy.nb -
2009/01/31 10:38:06 NB000I Argument [1] ./tardy.nb
> #!/usr/local/bin/nb
> # File: tutorial/cache/tardy.nb
> define tardy node cache:(!~(6s):Source);
> tardy. define r1 if(_action="expire"): $ # $@{Source@} has been quiet for $@{_interval@}
> tardy. assert ("Fred");
> # Press the ENTER key once repeatedly until the rule fires
> # Should happen in 6 seconds
2014-07-20 22:10:30 NB000I Source file "./tardy.nb" included. size=284
2014-07-20 22:10:30 NB000I Argument [2] -
2014-07-20 @b{22:10:30} NB000I Reading from standard input.
---------- --------
> 
> 
> 
> 
> 
> 
2014-07-20 @b{22:10:36} NB000I Rule tardy.r1 fired 
: tardy. @b{# Fred has been quiet for 6 seconds}
> 
@end smallexample
@end cartouche

@section Event Sequence

A cache node can be used like a tree node for detecting a sequence of events.  However, the cache node, having support for scheduled tuple expiration, can also support a timing condition.
The @code{OnJust} cache below is used to remember for 5 seconds that a switch has been turned on.
The @code{TurnedOn} rule asserts the name of a switch to the cache each time a switch is turned on.
The @code{TurnedOff} rule responds to a switch being turned off if the cache still remembers the switch being turned on.

@cartouche
@smallexample
#!/usr/local/bin/nb
# File: tutorial/cache/sequence.nb
define OnJust node cache:(~(5s):switch);
define TurnedOn if(on) OnJust(switch);
define TurnedOff if(!on and OnJust(switch)):@dots{}
@dots{} $ # The $@{switch@} turned off within $@{OnJust._interval@} of turning on

# Sample events
alert on,switch="kitchen light";
alert on,switch="porch light";
alert !on,switch="kitchen light";
-sleep 6
alert !on,switch="porch light";
alert on,switch="porch light";
alert !on,switch="porch light";
@end smallexample
@end cartouche

In the execution below, notice that the @code{TurnedOff} rule did not respond when the porch light stayed on for 6 seconds.

@cartouche
@smallexample
$ ./sequence.nb
2014-07-20 22:14:53 NB000I Argument [1] ./sequence.nb
> #!/usr/bin/nb
> # File: tutorial/cache/sequence.nb
> define OnJust node cache:(~(5s):switch);
> define TurnedOn if(on) OnJust(switch);
> define TurnedOff if(!on and OnJust(switch)): \
  $ # The $@{switch@} turned off within $@{OnJust._interval@} of turning on
> # Sample events
> alert on,switch="kitchen light";
2014-07-20 22:14:53 NB000I Rule TurnedOn fired (OnJust(switch)=!!)
> alert on,switch="porch light";
2014-07-20 22:14:53 NB000I Rule TurnedOn fired (OnJust(switch)=!!)
> alert !on,switch="kitchen light";
2014-07-20 22:14:53 NB000I Rule TurnedOff fired 
: # The kitchen light turned off within 5 seconds of turning on
> -sleep 6
[4619] Started: -sleep 6
[4619] Exit(0)
> @b{alert !on,switch="porch light";}
> alert on,switch="porch light";
2014-07-20 22:14:59 NB000I Rule TurnedOn fired (OnJust(switch)=!!)
> alert !on,switch="porch light";
2014-07-20 22:14:59 NB000I Rule TurnedOff fired 
: # The porch light turned off within 5 seconds of turning on
2014-07-20 22:14:59 NB000I Source file "./sequence.nb" included. size=463
2014-07-20 22:14:59 NB000I NodeBrain nb[4618] terminating - exit code=0
009/01/31 11:23:20 NB000I NodeBrain nb[6409] terminating - exit code=0
$
@end smallexample
@end cartouche

@section Event Correlation

A cache node is useful for event correlation where the goal is to detect repetition, variation, or sequence.
Rules can be used to recognize input events and assert multiple attribute combinations (tuples) to different cache
nodes to detect different patterns.
A single cache can detect multiple patterns, but it often necessary to specify attributes in a different order in different cache nodes to detect all the required patterns.
For example, a cache specified as (@code{child,action[5],toy}) could detect a given child taking a given action on five different toys, while a cache specified as (@code{toy[10],child[3],action(7)}) could detect when 10 different children performed a given action on a given toy, a given child performed three different actions on a given toy, and a given child performed a given action on a given toy seven times.  The last condition could be detected by the first cache if you included another threshold (@code{child,action[5],toy(7)}).
But the first two conditions detected by the second cache could not be detected by the first cache.
It is necessary to use two different cache nodes with the attributes in a different order to detect all four conditions.
