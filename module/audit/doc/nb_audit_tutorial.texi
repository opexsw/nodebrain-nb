@c Audit tutorial
@c   A section to the NodeBrain Tutorial and Audit Nodebrain Module docs.

@quotation
@i{If Edison had a needle to find in a haystack, he would proceed at once with the diligence of the bee to examine straw after straw until he found the object of his search.... I was a sorry witness of such doings, knowing that a little theory and calculation would have saved him ninety per cent of his labor.}
---Nikola Tesla (1857--1943), @i{New York Times}, October 19, 1931
@end quotation

Effective review of system and application logs can be like trying to find a needle in a haystack.  It requires at least one Edison and one Tesla working as a team.  The Audit node module works like Edison when reviewing logs so you can work like Tesla.

An Audit node is similar to the Translator node covered in an earlier tutorial, but differs in the way lines of text are input for translation.  An Audit node starts at the end of a log file and periodically checks for new lines to translate.  When a log file rolls, the Audit node starts at the beginning of the new log file.

The content of system and application log files can vary significantly depending on the mix of applications on a system and how they are configured.  A good strategy is to treat log entries as worthy of investigation by default.  Duplicate suppression and other flood protection techniques are helpful when using this strategy.  As new log entries are reported and investigated, you can decide if they should be suppressed or handled in a special way.

@section Agent Rules

The @code{syslog.nb} file below provides an agent with an Audit node to monitor a log file called @code{syslog}.  
It specifies a translator named @code{syslog.nbx} and a polling interval of 10 seconds.
(A longer interval is recommended for real applications.)
It also includes a deduplication cache.

@cartouche
@smallexample
#!/usr/local/bin/nb -d
# File: tutorial/Audit/syslog.nb
set log="syslog.log",out=".";
define syslog node cache(~(h(8))):(~(1h):route,appl,group,node,object,severity,text(1));
syslog. define alarm if(text._hitState):$ -|mail.form \
  source=tutorial route="$@{route@}" appl="$@{appl@}" group="$@{group@}" \
  node="$@{node@}" severity="$@{severity@}" text="$@{text@}" >> mail.log
@b{syslog. define audit node audit("syslog","syslog.nbx",~(10s));}
@end smallexample
@end cartouche


@section Sample Log

Here's a small sample of a log file in the format to use for this tutorial.
A copy of this file is stored as @code{tutorial/Audit/syslog.sample}.

@cartouche
@smallexample
Feb  1 19:00:04 smk001 sshd[3972]: Accepted publickey for myuser \
  from ::ffff:192.168.1.100 port 53403 ssh2
Feb  1 19:00:06 smk001 sshd[3980]: Accepted publickey for myuser \
  from ::ffff:192.168.1.101 port 53410 ssh2
Feb  1 19:00:16 smk001 kernel: z90crypt: probe_crypto_domain -> \
  Unable to find crypto domain: No devices found
Feb  1 19:00:46 smk001 kernel: z90crypt: probe_crypto_domain -> \
  Unable to find crypto domain: No devices found
Feb  1 19:01:16 smk001 kernel: z90crypt: probe_crypto_domain -> \
  Unable to find crypto domain: No devices found
Feb  1 19:01:19 smk001 su: (to root) myuser on /dev/pts/1
@end smallexample
@end cartouche

@section Translation Rules

Here's a small translator called @code{syslog.nbx} designed for the log format above.

@cartouche
@smallexample
# File: tutorial/Audit/syslog.nbx
([a-zA-Z]+ +\d+ \d\d:\d\d:\d\d [^ ]+ )@{
  (^-- MARK --)
  (^\/USR\/SBIN\/CRON\[\d+\]: [^ ]+ CMD)
  (^last message repeated \d+ times)
  (^kernel: )@{
    (^z90crypt: probe_crypto_domain -> Unable to find crypto domain: No devices found)
    (^end_request: I\/O error)
    (^dasd_erp.*:Perform logging requested)
    (^dasd:.*:ERP successful)
    :syslog. assert ("syslog","syslog","OS","","","normal","SYS0000 kernel: $[=]");
    @}
  (^su: )@{
    (^pam_unix2: session (started|finished) for user (nobody|root|wwwadm|cyrus), service su)
    (^\(to (nobody|cyrus)\) root on none)
    :syslog. assert ("syslog","syslog","OS","","","normal","SYS0000 su: $[=]");
    @}
  (^sshd\[\d+\]: )@{
    (^Accepted password for myuser from ::ffff:.* port \d+ ssh2)
    (^Accepted publickey for myuser from ::ffff:.* port \d+ ssh2)
    (^error: Could not get shadow information for NOUSER)
    (^(?'preport'.*port) \d+ )@{
      :syslog. assert ("syslog","syslog","OS","","","normal",\
         "SYS0000 sshd[*]: $[preport]port * $[=]");
      @}
    :syslog. assert ("syslog","syslog","OS","","","normal","SYS0000 sshd[*]: $[=]");
    @}
  @}
():syslog. assert ("syslog","syslog","OS","","","critical","SYS0000 $[-]");
@end smallexample
@end cartouche

@page
@section Start the Agent

Before starting the agent, you must touch  @code{syslog} to make sure it exists.

@cartouche
@smallexample
$ ./syslog.nb
2009/02/01 19:56:57 NB000I Argument [1] -d
2009/02/01 19:56:57 NB000I Argument [2] ./syslog.nb
> #!/usr/local/bin/nb -d
> # File: tutorial/Audit/syslog.nb
> set log="syslog.log",out=".";
2009/02/01 19:56:57 NB000I NodeBrain nb will log to syslog.log
> define syslog node cache(~(h(8))):(~(1h):route,appl,group,node,object,severity,text(1));
> syslog. define alarm if(text._hitState):$ -|mail.form \
    source=tutorial route="$@{route@}" appl="$@{appl@}" group="$@{group@}" \
    node="$@{node@}" severity="$@{severity@}" text="$@{text@}" >> mail.log
> syslog. define audit node audit("syslog","syslog.nbx",~(10s));
2009/02/01 19:56:57 NB000I Loading translator "syslog.nbx"
---------- --------
# File: tutorial/Audit/syslog.nbx
([a-zA-Z]+ +\d+ \d\d:\d\d:\d\d [^ ]+ )@{
  (^-- MARK --)
  (^\/USR\/SBIN\/CRON\[\d+\]: [^ ]+ CMD)
  (^last message repeated \d+ times)
  (^kernel: )@{
    (^z90crypt: probe_crypto_domain -> Unable to find crypto domain: No devices found)
    (^end_request: I\/O error)
    (^dasd_erp.*:Perform logging requested)
    (^dasd:.*:ERP successful)
    :syslog. assert ("syslog","syslog","OS","","","normal","SYS0000 kernel: $[=]");
    @}
  (^su: )@{
    (^pam_unix2: session (started|finished) for user (nobody|root|wwwadm|cyrus), service su)
    (^\(to (nobody|cyrus)\) root on none)
    :syslog. assert ("syslog","syslog","OS","","","normal","SYS0000 su: $[=]");
    @}
  (^sshd\[\d+\]: )@{
    (^Accepted password for myuser from ::ffff:.* port \d+ ssh2)
    (^Accepted publickey for myuser from ::ffff:.* port \d+ ssh2)
    (^error: Could not get shadow information for NOUSER)
    (^(?'preport'.*port) \d+ )@{
      :syslog. assert ("syslog","syslog","OS","","","normal",\
         "SYS0000 sshd[*]: $[preport]port * $[=]");
      @}
    :syslog. assert ("syslog","syslog","OS","","","normal","SYS0000 sshd[*]: $[=]");
    @}
  @}
():syslog. assert ("syslog","syslog","OS","","","critical","SYS0000 $[-]");
---------- --------
2009/02/01 19:56:57 NB000I Translator "syslog.nbx" loaded successfully.
2009/02/01 19:56:57 NB000I Source file "./syslog.nb" included. size=425
2009/02/01 19:56:57 NB000I NodeBrain nb[6749,3352] daemonizing
$
@end smallexample
@end cartouche

@section Grow the Log

Use a shell script to append the sample log file @code{syslog.sample} to the monitored @code{syslog} file three times.

@cartouche
@smallexample
# File: tutorial/Audit/syslog.sh
cat syslog.sample >> syslog
cat syslog.sample >> syslog
cat syslog.sample >> syslog
@end smallexample
@end cartouche

@section Review the Agent Log

After executing the @code{syslog.sh} script above, your @code{syslog.log} file should look like this.

@cartouche
@smallexample
2009/02/01 19:59:35 NB000I Agent log is syslog.log
2009/02/01 19:59:35 NM000I audit audit: Enabled audit of syslog using syslog.nbx
> syslog. assert ("syslog","syslog","OS","","","normal",\
    "SYS0000 su: (to root) myuser on /dev/pts/1");
2009/02/01 20:00:05 NB000I Rule syslog.alarm fired
: syslog. -|mail.form source=tutorial route="syslog" appl="syslog" group="OS" \
    node="" severity="normal" text="SYS0000 su: (to root) myuser on /dev/pts/1" >> mail.log
[6957] Started: -|mail.form source=tutorial route="syslog" appl="syslog" group="OS" \
    node="" severity="normal" \
    text="SYS0000 su: (to root) myuser on /dev/pts/1" >> mail.log
[6957] Exit(0)
> syslog. assert ("syslog","syslog","OS","","","normal", \
    "SYS0000 su: (to root) myuser on /dev/pts/1");
> syslog. assert ("syslog","syslog","OS","","","normal", \
    "SYS0000 su: (to root) myuser on /dev/pts/1");
> syslog. assert ("syslog","syslog","OS","","","normal", \
    "SYS0000 su: (to root) myuser on /dev/pts/1");
@end smallexample
@end cartouche

Notice that the translator only asserted the @code{su} log entries to the @code{syslog} cache.
This is because the translator was coded to ignore the other entries in the sample log file.
Notice also that the agent only generated an alarm once.
This is because the @code{syslog} cache node was coded to ignore duplicates until 8:00 AM unless they are separated by 1 hour.

Although you used a system log for this tutorial, you can code a translator for application logs as well.
In fact, the more unique your application log, the more likely you will need to construct your own custom log monitor.

If you started the agent for this tutorial, you should kill it now.


