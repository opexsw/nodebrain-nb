@c This tutorial is included in both the NodeBrain Tutorial and Baseline module manual

@quotation
@i{Do not put your faith in what statistics say until you have carefully considered what they do not say.}
---William W. Watt 
@end quotation

A Baseline node is used to detect statistical anomalies.  It does not tell us what is good, bad, or important.  However, it can help to find conditions worthy of further investigation.

@section Creating Profile Directory
@cindex profile

Create a directory for storing period profiles.  Since you are going to create a statistical profile for weather measurements, name the directory @code{weather}, and create it in the @code{cache/baseline} subdirectory of the caboodle (NodeBrain application directory).

@cartouche
@smallexample
$ cd CABOODLE
$ mkdir -p cache/baseline/weather
@end smallexample
@end cartouche

@section Constant Expectation
@cindex constant expectation

Let's say you are monitoring the temperature and humidity inside a house where it is expected to be relatively constant over time.  There is no need to manage multiple period profiles, nor is there a reason to learn a statistical definition of normal.  Instead, you can use a single period with a static profile that you define manually.

@cartouche
@smallexample
# cache/baseline/weather/00000000.nb
.("temperature"):set 68,2;
.("humidity"):set 45,5;
@end smallexample
@end cartouche

In this case, define the Baseline node as follows.

@cartouche
@smallexample
# arguments: directory, weight, tolerance, cycle, period
define indoor node baseline("cache/baseline/weather",0,0.8,60,60):static;
@end smallexample
@end cartouche

Here's a quick explanation of your choices.

@itemize @bullet
@item The @code{static} option is used to avoid updating the profile at the end of a period. 
@item A weight of 0 is used to avoid adjusting the average based on new actual values.
This is not technically required under the @code{static} option, but any other value would be misleading.
@item A tolerance of 0.8 is specified so you can express the range of normal values in the same units as the measure.
This may seem a bit odd, but because of the approximation of standard deviation, 0.8 standard deviation is 1 average deviation.  Since the profile contains average deviation, you can set it to half the normal range and set the average to the center of the normal range.
@item A one-hour (60 minute) cycle and period are used so only one period profile is needed.  Since the period duration divides into the cycle duration one time, keep repeating a single period.
@end itemize

@section Asserting Values
@cindex assert

There is nothing special about the way to make assertions to a Baseline node.
You assert values in the same way you would assert to a Tree node.
Here are some examples.

@cartouche
@smallexample
indoor. assert ("temperature")=67.4,("humidity")=45.3;
assert x=1,y="abc",indoor("temperature")=67.4,indoor("humidity")=45.3;
indoor. assert x=2,("temperature")=73;
@end smallexample
@end cartouche

@section Anomaly Response Rules
@cindex response rules

Given the last assertion above, where temperature is asserted to be 73, you may expect the following alert to be generated by the "indoor" node shown previously.
@cartouche
@smallexample
alert _measure="'temperature'",_value=73,_average=68,_sigma=2.5,_deviation=5, \
      _threshold=5,_level=1;
@end smallexample
@end cartouche

By itself this alert does nothing.  You need to provide rules to specify a response.
Here's an example that simply echoes an entry out to an application log, and when it is a temperature anomaly also logs to the system log.

@cartouche
@smallexample
# arguments: directory, weight, tolerance, cycle, period
define indoor node baseline("cache/baseline/weather",0,0.8,60,60):static;
# alert _measure="...",_value=n,_average=n,_sigma=n,_deviation=n,_threshold=n,_level=n;
indoor. define logecho if(1):$ =echo `date` "$@{_measure@} value of $@{_value@} is out of  \
                                     range - threshold is $@{_threshold@}" >> weather.log
indoor. define logger if(_measure="'temperature'"):$ =logger -p local0.notice -t WEATHER \
                                      "$@{_measure@}=$@{_value@} threshold=$@{threshold@}"
@end smallexample
@end cartouche

Here's another example where the response is more complicated.  The @code{alarmit} rule invokes the @code{alarm} macro, which is defined on the third line.  The macro makes an assertion to the @code{alarmMessage} cache.  The cache logs a message to the system log, but only when the measure has had no anomaly
alerts for at least 1 hour prior.  The @code{cacheit} rule asserts the measure name to the @code{anomaly} cache, which can be used to check whether a measure has had an anomaly alert in the past 2 hours.

@cartouche
@smallexample
define alarmMessage node cache(~(h):measure,message(1));
alarmMessage. define alarmit if(message._hitState):$ =logger -p local0.notice -t WEATHER \
                                                                            "$@{message@}"

define alarm macro(msgid,measure,text):% alarmMessage. assert ("%@{measure@}","%@{msgid@} %@{text@}");

# keep track of anomalies within the past 2 hours
define anomaly node cache:(~(2h):measure);

# arguments: directory, weight, tolerance, cycle, period
define indoor node baseline("cache/baseline/weather",0,0.8,60,60):static;
# alert _measure="...",_value=n,_average=n,_sigma=n,_deviation=n,_threshold=n,_level=n;
indoor. define alarmit if(1):$ $alarm("XYZ0001","$@{_measure@}", \
                   "Weather measure $@{_measure@}=$@{_value@} threshold=$@{_threshold@}");
indoor. define cacheit if(1) anomaly(_measure);
@end smallexample
@end cartouche

@section Periodicity
@cindex periodicity

Now let's suppose you live in a barn, where the temperature and humidity are not so constant,
but where the temperature values are expected to vary by time of day. You may want a profile for every 4-hour period during the day. There would be six periods per day.  The period profiles are stored in files with names incrementing by 4*60*60, or 14400 seconds.

@multitable {-------------------} {------------------------}
@item @b{Period} @tab @b{Profile}
@item 00:00 to 04:00 @tab 00000000.nb
@item 04:00 to 08:00 @tab 00014400.nb
@item 08:00 to 12:00 @tab 00028800.nb
@item 12:00 to 16:00 @tab 00043200.nb
@item 16:00 to 20:00 @tab 00057600.nb
@item 20:00 to 00:00 @tab 00072000.nb
@end multitable

The Baseline node now has a 24-hour cycle time and a 4-hour period.

@cartouche
@smallexample
# arguments: directory, weight, tolerance, cycle, period
define indoor node baseline("cache/baseline/weather",0,0.8,@b{24*}60,@b{4*}60):static;
@end smallexample
@end cartouche

@section Learning
@cindex learning

Suppose you don't have a preconceived notion of what a normal range of values is for your measures.
In this case, you want to let the Baseline module create the profiles for you and adjust the average
value and average deviation based on actual values experience while learning is enabled.  To do this, simply remove the @code{static} option from the Baseline node definition and provide a non-zero weight to control how fast to adapt averages to new actuals.  Because you no longer know the range of normal values, you express the tolerance in standard deviations (e.g., 3 below).

@cartouche
@smallexample
# arguments: directory, weight, tolerance, cycle, period
define indoor node baseline("cache/baseline/weather",@b{0.2},@b{3},@b{24*}60,@b{4*}60);
@end smallexample
@end cartouche

At the end of each period, the profile is updated with weight-adjusted averages for each measure's value and deviation.

@section Computer Network Periods
@cindex periods

Measurements within a computer network (e.g., number of packets by protocol) typically vary based on user and software schedules that vary by time of day and day of week.  If you are monitoring measures with this type of periodicity, it is appropriate to use a weekly cycle and hourly period.

@cartouche
@smallexample
# arguments: directory, weight, tolerance, cycle, period
define packets node baseline("cache/baseline/@b{packetsbyprotocol}",0.2,3,@b{7*24*60},@b{60});
@end smallexample
@end cartouche

@section Summation
@cindex summation

When your measures are counts (e.g., number of packets by protocol), your information source may provide counts over units of time much smaller than the period duration.  In this case, you want to sum up the counts from the information source over the period duration.  You do this by specifying the @code{sum} option.

@cartouche
@smallexample
# arguments: directory, weight, tolerance, cycle, period
define packets node baseline("cache/baseline/packetsbyprotocol",0.2,3,7*24*60,60):@b{sum};
@end smallexample
@end cartouche

Now when you assert values to measures within the Baseline node, the measures are incremented instead of being set to the new value.

@cartouche
@smallexample
packets. assert ("icmp")=465,("http")=1024,("smtp")=34; # increment measures
@end smallexample
@end cartouche

At the end of each period, the measures are all reset to zero when the @code{sum} option is used.
