#!../nb/nb
~ > #!../nb/nb
#
~ > #
# File: cellStaticBoolUnknown.nb
~ > # File: cellStaticBoolUnknown.nb
#
~ > #
# Test cell static expression - Boolean Unknown
~ > # Test cell static expression - Boolean Unknown
#================================================
~ > #================================================

# Define rule to enable 9 cells
~ > # Define rule to enable 9 cells

define r1 if(e1 & e2 & e3 & e4 & e5 & e6 & e7 & e8 & e9 & eA & eB);
~ > define r1 if(e1 & e2 & e3 & e4 & e5 & e6 & e7 & e8 & e9 & eA & eB);

# Test with literal numbers
~ > # Test with literal numbers

assert e1==(?    );
~ > assert e1==(?    );
assert e2==(!?);
~ > assert e2==(!?);
assert e3==(1 & ?);
~ > assert e3==(1 & ?);
assert e4==(? & 1);
~ > assert e4==(? & 1);
assert e5==(? & ?);
~ > assert e5==(? & ?);
assert e6==(? | ?);
~ > assert e6==(? | ?);
assert e7==(? ^ !);
~ > assert e7==(? ^ !);
assert e8==(! ^ ?);
~ > assert e8==(! ^ ?);
assert e9==(? ^ 1);
~ > assert e9==(? ^ 1);
assert eA==(1 ^ ?);
~ > assert eA==(1 ^ ?);
assert eB==(? ^ ?);
~ > assert eB==(? ^ ?);

show -cells;
~ > show -cells;
~ @ = # == node 
~ e1 = ?
~ e2 = ?
~ e3 = ?
~ e4 = ?
~ e5 = ?
~ e6 = ?
~ e7 = ? == (?^!)
~ e8 = ? == (!^?)
~ e9 = ? == (?^1)
~ eA = ? == (1^?)
~ eB = ? == (?^?)
~ r1 = # ? == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&(e9&(eA&eB))))))))));

# Test with variable numbers
~ > # Test with variable numbers

assert t=1;
~ > assert t=1;
assert f=!;
~ > assert f=!;
assert u=?;
~ > assert u=?;

assert e1==(u    );
~ > assert e1==(u    );
assert e2==(!u);
~ > assert e2==(!u);
assert e3==(t & u);
~ > assert e3==(t & u);
assert e4==(u & t);
~ > assert e4==(u & t);
assert e5==(u & u);
~ > assert e5==(u & u);
assert e6==(u | u);
~ > assert e6==(u | u);
assert e7==(u ^ f);
~ > assert e7==(u ^ f);
assert e8==(f ^ u);
~ > assert e8==(f ^ u);
assert e9==(u ^ t);
~ > assert e9==(u ^ t);
assert eA==(t ^ u);
~ > assert eA==(t ^ u);
assert eB==(u ^ u);
~ > assert eB==(u ^ u);

show -cells;
~ > show -cells;
~ @ = # == node 
~ e1 = ? == u
~ e2 = ? == (!u)
~ e3 = ? == (t&u)
~ e4 = ? == (u&t)
~ e5 = ? == (u&u)
~ e6 = ? == (u|u)
~ e7 = ? == (u^f)
~ e8 = ? == (f^u)
~ e9 = ? == (u^t)
~ eA = ? == (t^u)
~ eB = ? == (u^u)
~ f = !
~ r1 = # ? == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&(e9&(eA&eB))))))))));
~ t = 1
~ u = ?

# Test with literal string (can only represent True)
~ > # Test with literal string (can only represent True)

assert e1==( u       );
~ > assert e1==( u       );
assert e2==(!u    );
~ > assert e2==(!u    );
assert e3==("a" &  u );
~ > assert e3==("a" &  u );
assert e4==( u  & "a");
~ > assert e4==( u  & "a");
assert e5==( u  &  u );
~ > assert e5==( u  &  u );
assert e6==( u  |  u );
~ > assert e6==( u  |  u );
assert e7==( u  ^  f );
~ > assert e7==( u  ^  f );
assert e8==( f  ^  u );
~ > assert e8==( f  ^  u );
assert e9==( u  ^ "a");
~ > assert e9==( u  ^ "a");
assert eA==("a" ^  u );
~ > assert eA==("a" ^  u );
assert eB==( u  ^  u );
~ > assert eB==( u  ^  u );

show -cells;
~ > show -cells;
~ @ = # == node 
~ e1 = ? == u
~ e2 = ? == (!u)
~ e3 = ? == u
~ e4 = ? == (u&"a")
~ e5 = ? == (u&u)
~ e6 = ? == (u|u)
~ e7 = ? == (u^f)
~ e8 = ? == (f^u)
~ e9 = ? == (u^"a")
~ eA = ? == ("a"^u)
~ eB = ? == (u^u)
~ f = !
~ r1 = # ? == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&(e9&(eA&eB))))))))));
~ t = 1
~ u = ?

# Test with variable string
~ > # Test with variable string

assert a="a";
~ > assert a="a";

assert e1==(u    );
~ > assert e1==(u    );
assert e2==(!u);
~ > assert e2==(!u);
assert e3==(a & u);
~ > assert e3==(a & u);
assert e4==(u & a);
~ > assert e4==(u & a);
assert e5==(u & u);
~ > assert e5==(u & u);
assert e6==(u | u);
~ > assert e6==(u | u);
assert e7==(u ^ f);
~ > assert e7==(u ^ f);
assert e8==(f ^ u);
~ > assert e8==(f ^ u);
assert e9==(u ^ a);
~ > assert e9==(u ^ a);
assert eA==(a ^ u);
~ > assert eA==(a ^ u);
assert eB==(u ^ u);
~ > assert eB==(u ^ u);

show -cells;
~ > show -cells;
~ @ = # == node 
~ a = "a"
~ e1 = ? == u
~ e2 = ? == (!u)
~ e3 = ? == (a&u)
~ e4 = ? == (u&a)
~ e5 = ? == (u&u)
~ e6 = ? == (u|u)
~ e7 = ? == (u^f)
~ e8 = ? == (f^u)
~ e9 = ? == (u^a)
~ eA = ? == (a^u)
~ eB = ? == (u^u)
~ f = !
~ r1 = # ? == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&(e9&(eA&eB))))))))));
~ t = 1
~ u = ?

# Verify that all e1-eB cells above have a value of "?"
~ > # Verify that all e1-eB cells above have a value of "?"
