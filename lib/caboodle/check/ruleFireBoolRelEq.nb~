#!../nb/nb
~ > #!../nb/nb
#
~ > #
# File: ruleFireBoolRelEq.nb
~ > # File: ruleFireBoolRelEq.nb
#
~ > #
# Test Boolean operators on simple relational equality
~ > # Test Boolean operators on simple relational equality
#
~ > #
define r1 on(a=1)[1]: show r1
~ > define r1 on(a=1)[1]: show r1
define r2 on(not a=1)[2]: show r2
~ > define r2 on(not a=1)[2]: show r2
define r3 on(a=1 & b=1)[3]: show r3
~ > define r3 on(a=1 & b=1)[3]: show r3
define r4 on(a=1 | b=1)[4]: show r4
~ > define r4 on(a=1 | b=1)[4]: show r4
define r5 on(a=1 ^ b=1)[5]: show r5
~ > define r5 on(a=1 ^ b=1)[5]: show r5

# Same as ruleFireBoolSimple.nb from here down
~ > # Same as ruleFireBoolSimple.nb from here down

# trigger 1 and 4
~ > # trigger 1 and 4
assert a=1;
~ > assert a=1;
~ 1970/01/01 00:00:01 NB000I Rule r1 fired 
~ : show r1
~ r1 = # == on(a=1)[1]:show r1
~ 1970/01/01 00:00:02 NB000I Rule r4 fired 
~ : show r4
~ r4 = # == on((a=1)|(b=1))[4]:show r4
# trigger 2
~ > # trigger 2
assert a=0;
~ > assert a=0;
~ 1970/01/01 00:00:01 NB000I Rule r2 fired 
~ : show r2
~ r2 = # == on(!(a=1))[2]:show r2
# trigger 1, 3 and 4
~ > # trigger 1, 3 and 4
assert a=1,b=1;
~ > assert a=1,b=1;
~ 1970/01/01 00:00:01 NB000I Rule r1 fired 
~ : show r1
~ r1 = # == on(a=1)[1]:show r1
~ 1970/01/01 00:00:02 NB000I Rule r3 fired 
~ : show r3
~ r3 = # == on((a=1)&(b=1))[3]:show r3
~ 1970/01/01 00:00:03 NB000I Rule r4 fired 
~ : show r4
~ r4 = # == on((a=1)|(b=1))[4]:show r4
# trigger 5
~ > # trigger 5
assert b=0;
~ > assert b=0;
~ 1970/01/01 00:00:01 NB000I Rule r5 fired 
~ : show r5
~ r5 = # == on((a=1)^(b=1))[5]:show r5
# Make sure flip-flop goes through the proper sequence
~ > # Make sure flip-flop goes through the proper sequence
set showValue
~ > set showValue
show r5
~ > show r5
~ {#}r5 = # == on{1}({1}({1}a=1)^{!}({0}b=1))[5]:show r5
# r5 should maintain state, r3 should trigger
~ > # r5 should maintain state, r3 should trigger
assert b=1;
~ > assert b=1;
~ 1970/01/01 00:00:01 NB000I Rule r3 fired 
~ : show r3
~ {#}r3 = # == on{1}({1}({1}a=1)&{1}({1}b=1))[3]:show r3
show r5
~ > show r5
~ {#}r5 = # == on{1}({1}({1}a=1)^{1}({1}b=1))[5]:show r5
# r5 should switch to false, r2 should trigger
~ > # r5 should switch to false, r2 should trigger
assert a=0;
~ > assert a=0;
~ 1970/01/01 00:00:01 NB000I Rule r2 fired 
~ : show r2
~ {#}r2 = # == on{1}(!{!}({0}a=1))[2]:show r2
show r5
~ > show r5
~ {#}r5 = # == on{!}({!}({0}a=1)^{1}({1}b=1))[5]:show r5
# r5 should maintain state
~ > # r5 should maintain state
assert b=0;
~ > assert b=0;
show r5
~ > show r5
~ {#}r5 = # == on{!}({!}({0}a=1)^{!}({0}b=1))[5]:show r5
set noshowValue
~ > set noshowValue
# trigger 1, 4 and 5
~ > # trigger 1, 4 and 5
assert a=1;
~ > assert a=1;
~ 1970/01/01 00:00:01 NB000I Rule r1 fired 
~ : show r1
~ r1 = # == on(a=1)[1]:show r1
~ 1970/01/01 00:00:02 NB000I Rule r4 fired 
~ : show r4
~ r4 = # == on((a=1)|(b=1))[4]:show r4
~ 1970/01/01 00:00:03 NB000I Rule r5 fired 
~ : show r5
~ r5 = # == on((a=1)^(b=1))[5]:show r5
