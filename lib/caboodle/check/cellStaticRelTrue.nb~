# File:# cellStaticRelTrue.nb 
~ > # File:# cellStaticRelTrue.nb 
#
~ > #
# Test cell static expression - relational True
~ > # Test cell static expression - relational True
#=======================================================
~ > #=======================================================

# Define rule to enable 8 cells
~ > # Define rule to enable 8 cells

define r1 on(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8);
~ > define r1 on(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8);

# Test with 0 and 1
~ > # Test with 0 and 1

assert e1==(0=0);
~ > assert e1==(0=0);
assert e2==(1=1);
~ > assert e2==(1=1);
assert e3==(0<1);
~ > assert e3==(0<1);
assert e4==(0<=1);
~ > assert e4==(0<=1);
assert e5==(0<=0);
~ > assert e5==(0<=0);
assert e6==(1>0);
~ > assert e6==(1>0);
assert e7==(1>=0);
~ > assert e7==(1>=0);
assert e8==(1>=1);
~ > assert e8==(1>=1);
~ 1970-01-01 00:00:01 NB000I Rule r1 fired 

show -cells;
~ > show -cells;
~ _ = # == node 
~ e1 = !! == (0=0)
~ e2 = !! == (1=1)
~ e3 = !! == (0<1)
~ e4 = !! == (0<=1)
~ e5 = !! == (0<=0)
~ e6 = !! == (1>0)
~ e7 = !! == (1>=0)
~ e8 = !! == (1>=1)
~ r1 = # !! == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&e8)))))));

# Test with real numbers
~ > # Test with real numbers

assert e1==(0.5=0.5);
~ > assert e1==(0.5=0.5);
assert e2==(1.5=1.5); 
~ > assert e2==(1.5=1.5); 
assert e3==(0.5<1.5);
~ > assert e3==(0.5<1.5);
assert e4==(0.5<=1.5);
~ > assert e4==(0.5<=1.5);
assert e5==(0.5<=0.5);
~ > assert e5==(0.5<=0.5);
assert e6==(1.5>0.5);
~ > assert e6==(1.5>0.5);
assert e7==(1.5>=0.5);
~ > assert e7==(1.5>=0.5);
assert e8==(1.5>=1.5);
~ > assert e8==(1.5>=1.5);

show -cells;
~ > show -cells;
~ _ = # == node 
~ e1 = !! == (0.5=0.5)
~ e2 = !! == (1.5=1.5)
~ e3 = !! == (0.5<1.5)
~ e4 = !! == (0.5<=1.5)
~ e5 = !! == (0.5<=0.5)
~ e6 = !! == (1.5>0.5)
~ e7 = !! == (1.5>=0.5)
~ e8 = !! == (1.5>=1.5)
~ r1 = # !! == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&e8)))))));

# Test with strings
~ > # Test with strings

assert e1==("a"="a");
~ > assert e1==("a"="a");
assert e2==("b"="b");
~ > assert e2==("b"="b");
assert e3==("a"<"b");
~ > assert e3==("a"<"b");
assert e4==("a"<="b");
~ > assert e4==("a"<="b");
assert e5==("a"<="a");
~ > assert e5==("a"<="a");
assert e6==("b">"a");
~ > assert e6==("b">"a");
assert e7==("b">="a");
~ > assert e7==("b">="a");
assert e8==("b">="b");
~ > assert e8==("b">="b");

show -cells;
~ > show -cells;
~ _ = # == node 
~ e1 = !! == ("a"="a")
~ e2 = !! == ("b"="b")
~ e3 = !! == ("a"<"b")
~ e4 = !! == ("a"<="b")
~ e5 = !! == ("a"<="a")
~ e6 = !! == ("b">"a")
~ e7 = !! == ("b">="a")
~ e8 = !! == ("b">="b")
~ r1 = # !! == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&e8)))))));

# Test with variables
~ > # Test with variables

assert a="a";
~ > assert a="a";
assert b="b";
~ > assert b="b";

assert e1==(a=a);
~ > assert e1==(a=a);
assert e2==(b=b);
~ > assert e2==(b=b);
assert e3==(a<b);
~ > assert e3==(a<b);
assert e4==(a<=b);
~ > assert e4==(a<=b);
assert e5==(a<=a);
~ > assert e5==(a<=a);
assert e6==(b>a);
~ > assert e6==(b>a);
assert e7==(b>=a);
~ > assert e7==(b>=a);
assert e8==(b>=b);
~ > assert e8==(b>=b);

show -cells;
~ > show -cells;
~ _ = # == node 
~ a = "a"
~ b = "b"
~ e1 = !! == (a=a)
~ e2 = !! == (b=b)
~ e3 = !! == (a<b)
~ e4 = !! == (a<=b)
~ e5 = !! == (a<=a)
~ e6 = !! == (b>a)
~ e7 = !! == (b>=a)
~ e8 = !! == (b>=b)
~ r1 = # !! == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&e8)))))));

# Test with left variables
~ > # Test with left variables

assert e1==(a="a");
~ > assert e1==(a="a");
assert e2==(b="b");
~ > assert e2==(b="b");
assert e3==(a<"b");
~ > assert e3==(a<"b");
assert e4==(a<="b");
~ > assert e4==(a<="b");
assert e5==(a<="a");
~ > assert e5==(a<="a");
assert e6==(b>"a");
~ > assert e6==(b>"a");
assert e7==(b>="a");
~ > assert e7==(b>="a");
assert e8==(b>="b");
~ > assert e8==(b>="b");

show -cells;
~ > show -cells;
~ _ = # == node 
~ a = "a"
~ b = "b"
~ e1 = !! == (a="a")
~ e2 = !! == (b="b")
~ e3 = !! == (a<"b")
~ e4 = !! == (a<="b")
~ e5 = !! == (a<="a")
~ e6 = !! == (b>"a")
~ e7 = !! == (b>="a")
~ e8 = !! == (b>="b")
~ r1 = # !! == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&e8)))))));

# Test with right variables
~ > # Test with right variables

assert e1==("a"=a);
~ > assert e1==("a"=a);
assert e2==("b"=b);
~ > assert e2==("b"=b);
assert e3==("a"<b);
~ > assert e3==("a"<b);
assert e4==("a"<=b);
~ > assert e4==("a"<=b);
assert e5==("a"<=a);
~ > assert e5==("a"<=a);
assert e6==("b">a);
~ > assert e6==("b">a);
assert e7==("b">=a);
~ > assert e7==("b">=a);
assert e8==("b">=b);
~ > assert e8==("b">=b);

show -cells;
~ > show -cells;
~ _ = # == node 
~ a = "a"
~ b = "b"
~ e1 = !! == (a="a")
~ e2 = !! == (b="b")
~ e3 = !! == (b>"a")
~ e4 = !! == (b>="a")
~ e5 = !! == (a>="a")
~ e6 = !! == (a<"b")
~ e7 = !! == (a<="b")
~ e8 = !! == (b<="b")
~ r1 = # !! == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&e8)))))));

# Verify that all e1-e8 cells listed above have values of !!
~ > # Verify that all e1-e8 cells listed above have values of !!
