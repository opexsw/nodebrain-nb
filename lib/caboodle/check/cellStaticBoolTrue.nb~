# File: cellStaticBoolTrue.nb
~ > # File: cellStaticBoolTrue.nb
#
~ > #
# Test cell static expression - Boolean True
~ > # Test cell static expression - Boolean True
#================================================
~ > #================================================

# Define rule to enable 9 cells
~ > # Define rule to enable 9 cells

define r1 if(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);
~ > define r1 if(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);

# Test with literal numbers
~ > # Test with literal numbers

assert e1==(!!);
~ > assert e1==(!!);
assert e2==(!! & 1);
~ > assert e2==(!! & 1);
assert e3==(1 & 1);
~ > assert e3==(1 & 1);
assert e4==(1 | !);
~ > assert e4==(1 | !);
assert e5==(1 | ?); 
~ > assert e5==(1 | ?); 
assert e6==(! | 1);
~ > assert e6==(! | 1);
assert e7==(? | 1); 
~ > assert e7==(? | 1); 
assert e8==(1 | 1);
~ > assert e8==(1 | 1);
assert e9==(1 ^ !);
~ > assert e9==(1 ^ !);

show -cells;
~ > show -cells;
~ _ = # == node 
~ e1 = !!
~ e2 = !!
~ e3 = !!
~ e4 = !!
~ e5 = !!
~ e6 = !!
~ e7 = !!
~ e8 = !!
~ e9 = !! == (1^!)
~ r1 = # !! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));

# Test with variable numbers
~ > # Test with variable numbers

assert t;
~ > assert t;
assert f=!;
~ > assert f=!;

assert e1==(t    );
~ > assert e1==(t    );
assert e2==(!f);
~ > assert e2==(!f);
assert e3==(t & t);
~ > assert e3==(t & t);
assert e4==(t | f);
~ > assert e4==(t | f);
assert e5==(t | ?);
~ > assert e5==(t | ?);
assert e6==(f | t);
~ > assert e6==(f | t);
assert e7==(? | t);
~ > assert e7==(? | t);
assert e8==(t | t);
~ > assert e8==(t | t);
assert e9==(t ^ f);
~ > assert e9==(t ^ f);

show -cells;
~ > show -cells;
~ _ = # == node 
~ e1 = !! == t
~ e2 = !! == (!f)
~ e3 = !! == (t&t)
~ e4 = !! == (t|f)
~ e5 = !! == (t|?)
~ e6 = !! == (f|t)
~ e7 = !! == (?|t)
~ e8 = !! == (t|t)
~ e9 = !! == (t^f)
~ f = !
~ r1 = # !! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ t = !!

# Test with literal string
~ > # Test with literal string

assert a="a";
~ > assert a="a";

assert e1==a=("a");
~ > assert e1==a=("a");
assert e2==(!!);
~ > assert e2==(!!);
assert e3==a=("a" untrue "a");
~ > assert e3==a=("a" untrue "a");
assert e4==a=("a" untrue !);
~ > assert e4==a=("a" untrue !);
assert e5==a=("a" untrue ?);
~ > assert e5==a=("a" untrue ?);
assert e6==a=( !  untrue "a");
~ > assert e6==a=( !  untrue "a");
assert e7==a=( ?  untrue "a");
~ > assert e7==a=( ?  untrue "a");
assert e8==a=("a" untrue "a");
~ > assert e8==a=("a" untrue "a");
assert e9==("a" ^ !);
~ > assert e9==("a" ^ !);

show -cells;
~ > show -cells;
~ _ = # == node 
~ a = "a"
~ e1 = !! == (a="a")
~ e2 = !!
~ e3 = !! == (a="a")
~ e4 = !! == (a="a")
~ e5 = !! == (a="a")
~ e6 = !! == (a="a")
~ e7 = !! == (a="a")
~ e8 = !! == (a="a")
~ e9 = !! == ("a"^!)
~ f = !
~ r1 = # !! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ t = !!

# Test with variable string
~ > # Test with variable string

assert e1==a=(a);
~ > assert e1==a=(a);
assert e2==(!f);
~ > assert e2==(!f);
assert e3==!!=(a & a);
~ > assert e3==!!=(a & a);
assert e4==(t | f);
~ > assert e4==(t | f);
assert e5==(t | ?);
~ > assert e5==(t | ?);
assert e6==!!=(f | a);
~ > assert e6==!!=(f | a);
assert e7==!!=(? | a);
~ > assert e7==!!=(? | a);
assert e8==!!=(a | a);
~ > assert e8==!!=(a | a);
assert e9==(a ^ f);
~ > assert e9==(a ^ f);

show -cells;
~ > show -cells;
~ _ = # == node 
~ a = "a"
~ e1 = !! == (a=a)
~ e2 = !! == (!f)
~ e3 = !! == ((a&a)=!!)
~ e4 = !! == (t|f)
~ e5 = !! == (t|?)
~ e6 = !! == ((f|a)=!!)
~ e7 = !! == ((?|a)=!!)
~ e8 = !! == ((a|a)=!!)
~ e9 = !! == (a^f)
~ f = !
~ r1 = # !! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ t = !!

# Verify that all e1-e9 cells above have a value of !!
~ > # Verify that all e1-e9 cells above have a value of !!
