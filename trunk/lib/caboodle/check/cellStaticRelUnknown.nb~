#!../nb/nb
~ > #!../nb/nb
#
~ > #
# File: cellStaticRelUnknown.nb 
~ > # File: cellStaticRelUnknown.nb 
#
~ > #
# Test cell static expression - relation Unknown
~ > # Test cell static expression - relation Unknown
#=======================================================
~ > #=======================================================

# Define rule to enable 9 cells
~ > # Define rule to enable 9 cells

define r on(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);
~ > define r on(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);

# Define a known value
~ > # Define a known value

assert a="a";
~ > assert a="a";

# Test with literal Unknown
~ > # Test with literal Unknown

assert e1==(?=?);
~ > assert e1==(?=?);
assert e2==(?=0);
~ > assert e2==(?=0);
assert e3==(?=1);
~ > assert e3==(?=1);
assert e4==(?=a);
~ > assert e4==(?=a);
assert e5==(?="b");
~ > assert e5==(?="b");
assert e6==(0=?);
~ > assert e6==(0=?);
assert e7==(1=?);
~ > assert e7==(1=?);
assert e8==(a=?);
~ > assert e8==(a=?);
assert e9==("b"=?);
~ > assert e9==("b"=?);

show -cells;
~ > show -cells;
~ @ = # == node 
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b"=?)
~ e8 = ? == (a=?)
~ e7 = ? == (1=?)
~ e6 = ? == (0=?)
~ e5 = ? == (?="b")
~ e4 = ? == (?=a)
~ e3 = ? == (?=1)
~ e2 = ? == (?=0)
~ e1 = ? == (?=?)

assert e1==(?<?);
~ > assert e1==(?<?);
assert e2==(?<0);
~ > assert e2==(?<0);
assert e3==(?<1);
~ > assert e3==(?<1);
assert e4==(?<a);
~ > assert e4==(?<a);
assert e5==(?<"b");
~ > assert e5==(?<"b");
assert e6==(0<?);
~ > assert e6==(0<?);
assert e7==(1<?);
~ > assert e7==(1<?);
assert e8==(a<?);
~ > assert e8==(a<?);
assert e9==("b"<?);
~ > assert e9==("b"<?);

show -cells;
~ > show -cells;
~ @ = # == node 
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b"<?)
~ e8 = ? == (a<?)
~ e7 = ? == (1<?)
~ e6 = ? == (0<?)
~ e5 = ? == (?<"b")
~ e4 = ? == (?<a)
~ e3 = ? == (?<1)
~ e2 = ? == (?<0)
~ e1 = ? == (?<?)

assert e1==(?<=?);
~ > assert e1==(?<=?);
assert e2==(?<=0);
~ > assert e2==(?<=0);
assert e3==(?<=1);
~ > assert e3==(?<=1);
assert e4==(?<=a);
~ > assert e4==(?<=a);
assert e5==(?<="b");
~ > assert e5==(?<="b");
assert e6==(0<=?);
~ > assert e6==(0<=?);
assert e7==(1<=?);
~ > assert e7==(1<=?);
assert e8==(a<=?);
~ > assert e8==(a<=?);
assert e9==("b"<=?);
~ > assert e9==("b"<=?);

show -cells;
~ > show -cells;
~ @ = # == node 
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b"<=?)
~ e8 = ? == (a<=?)
~ e7 = ? == (1<=?)
~ e6 = ? == (0<=?)
~ e5 = ? == (?<="b")
~ e4 = ? == (?<=a)
~ e3 = ? == (?<=1)
~ e2 = ? == (?<=0)
~ e1 = ? == (?<=?)

assert e1==(?>?);
~ > assert e1==(?>?);
assert e2==(?>0);
~ > assert e2==(?>0);
assert e3==(?>1);
~ > assert e3==(?>1);
assert e4==(?>a);
~ > assert e4==(?>a);
assert e5==(?>"b");
~ > assert e5==(?>"b");
assert e6==(0>?);
~ > assert e6==(0>?);
assert e7==(1>?);
~ > assert e7==(1>?);
assert e8==(a>?);
~ > assert e8==(a>?);
assert e9==("b">?);
~ > assert e9==("b">?);

show -cells;
~ > show -cells;
~ @ = # == node 
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b">?)
~ e8 = ? == (a>?)
~ e7 = ? == (1>?)
~ e6 = ? == (0>?)
~ e5 = ? == (?>"b")
~ e4 = ? == (?>a)
~ e3 = ? == (?>1)
~ e2 = ? == (?>0)
~ e1 = ? == (?>?)

assert e1==(?>=?);
~ > assert e1==(?>=?);
assert e2==(?>=0);
~ > assert e2==(?>=0);
assert e3==(?>=1);
~ > assert e3==(?>=1);
assert e4==(?>=a);
~ > assert e4==(?>=a);
assert e5==(?>="b");
~ > assert e5==(?>="b");
assert e6==(0>=?);
~ > assert e6==(0>=?);
assert e7==(1>=?);
~ > assert e7==(1>=?);
assert e8==(a>=?);
~ > assert e8==(a>=?);
assert e9==("b">=?);
~ > assert e9==("b">=?);

show -cells;
~ > show -cells;
~ @ = # == node 
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b">=?)
~ e8 = ? == (a>=?)
~ e7 = ? == (1>=?)
~ e6 = ? == (0>=?)
~ e5 = ? == (?>="b")
~ e4 = ? == (?>=a)
~ e3 = ? == (?>=1)
~ e2 = ? == (?>=0)
~ e1 = ? == (?>=?)

# Test with undefined variable u 
~ > # Test with undefined variable u 

assert e1==(u=u);
~ > assert e1==(u=u);
assert e2==(u=0);
~ > assert e2==(u=0);
assert e3==(u=1);
~ > assert e3==(u=1);
assert e4==(u=a);
~ > assert e4==(u=a);
assert e5==(u="b");
~ > assert e5==(u="b");
assert e6==(0=u);
~ > assert e6==(0=u);
assert e7==(1=u);
~ > assert e7==(1=u);
assert e8==(a=u);
~ > assert e8==(a=u);
assert e9==("b"=u);
~ > assert e9==("b"=u);

show -cells;
~ > show -cells;
~ @ = # == node 
~ u = ?
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b"=u)
~ e8 = ? == (a=u)
~ e7 = ? == (1=u)
~ e6 = ? == (0=u)
~ e5 = ? == (u="b")
~ e4 = ? == (u=a)
~ e3 = ? == (u=1)
~ e2 = ? == (u=0)
~ e1 = ? == (u=u)

assert e1==(u<u);
~ > assert e1==(u<u);
assert e2==(u<0);
~ > assert e2==(u<0);
assert e3==(u<1);
~ > assert e3==(u<1);
assert e4==(u<a);
~ > assert e4==(u<a);
assert e5==(u<"b");
~ > assert e5==(u<"b");
assert e6==(0<u);
~ > assert e6==(0<u);
assert e7==(1<u);
~ > assert e7==(1<u);
assert e8==(a<u);
~ > assert e8==(a<u);
assert e9==("b"<u);
~ > assert e9==("b"<u);

show -cells;
~ > show -cells;
~ @ = # == node 
~ u = ?
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b"<u)
~ e8 = ? == (a<u)
~ e7 = ? == (1<u)
~ e6 = ? == (0<u)
~ e5 = ? == (u<"b")
~ e4 = ? == (u<a)
~ e3 = ? == (u<1)
~ e2 = ? == (u<0)
~ e1 = ? == (u<u)

assert e1==(u<=u);
~ > assert e1==(u<=u);
assert e2==(u<=0);
~ > assert e2==(u<=0);
assert e3==(u<=1);
~ > assert e3==(u<=1);
assert e4==(u<=a);
~ > assert e4==(u<=a);
assert e5==(u<="b");
~ > assert e5==(u<="b");
assert e6==(0<=u);
~ > assert e6==(0<=u);
assert e7==(1<=u);
~ > assert e7==(1<=u);
assert e8==(a<=u);
~ > assert e8==(a<=u);
assert e9==("b"<=u);
~ > assert e9==("b"<=u);

show -cells;
~ > show -cells;
~ @ = # == node 
~ u = ?
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b"<=u)
~ e8 = ? == (a<=u)
~ e7 = ? == (1<=u)
~ e6 = ? == (0<=u)
~ e5 = ? == (u<="b")
~ e4 = ? == (u<=a)
~ e3 = ? == (u<=1)
~ e2 = ? == (u<=0)
~ e1 = ? == (u<=u)

assert e1==(u>u);
~ > assert e1==(u>u);
assert e2==(u>0);
~ > assert e2==(u>0);
assert e3==(u>1);
~ > assert e3==(u>1);
assert e4==(u>a);
~ > assert e4==(u>a);
assert e5==(u>"b");
~ > assert e5==(u>"b");
assert e6==(0>u);
~ > assert e6==(0>u);
assert e7==(1>u);
~ > assert e7==(1>u);
assert e8==(a>u);
~ > assert e8==(a>u);
assert e9==("b">u);
~ > assert e9==("b">u);

show -cells;
~ > show -cells;
~ @ = # == node 
~ u = ?
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b">u)
~ e8 = ? == (a>u)
~ e7 = ? == (1>u)
~ e6 = ? == (0>u)
~ e5 = ? == (u>"b")
~ e4 = ? == (u>a)
~ e3 = ? == (u>1)
~ e2 = ? == (u>0)
~ e1 = ? == (u>u)

assert e1==(u>=u);
~ > assert e1==(u>=u);
assert e2==(u>=0);
~ > assert e2==(u>=0);
assert e3==(u>=1);
~ > assert e3==(u>=1);
assert e4==(u>=a);
~ > assert e4==(u>=a);
assert e5==(u>="b");
~ > assert e5==(u>="b");
assert e6==(0>=u);
~ > assert e6==(0>=u);
assert e7==(1>=u);
~ > assert e7==(1>=u);
assert e8==(a>=u);
~ > assert e8==(a>=u);
assert e9==("b">=u);
~ > assert e9==("b">=u);

show -cells;
~ > show -cells;
~ @ = # == node 
~ u = ?
~ a = "a"
~ r = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ? == ("b">=u)
~ e8 = ? == (a>=u)
~ e7 = ? == (1>=u)
~ e6 = ? == (0>=u)
~ e5 = ? == (u>="b")
~ e4 = ? == (u>=a)
~ e3 = ? == (u>=1)
~ e2 = ? == (u>=0)
~ e1 = ? == (u>=u)

# Verify that every e1-e9 cell above has a value of ?
~ > # Verify that every e1-e9 cell above has a value of ?
