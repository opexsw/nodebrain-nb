#!../nb/nb
~ > #!../nb/nb
#
~ > #
# File: cellStaticBoolFalse.nb
~ > # File: cellStaticBoolFalse.nb
#
~ > #
# Test cell static expression - Boolean False
~ > # Test cell static expression - Boolean False
#================================================
~ > #================================================
#?# This is a hidden comment until we check
~ > #?# This is a hidden comment until we check

# Define rule to enable 9 cells
~ > # Define rule to enable 9 cells

define r1 on(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);
~ > define r1 on(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);

# Test with literal numbers
~ > # Test with literal numbers

assert e1==(!    );
~ > assert e1==(!    );
assert e2==(not 1);
~ > assert e2==(not 1);
assert e3==(! & !);
~ > assert e3==(! & !);
assert e4==(! & 1);
~ > assert e4==(! & 1);
assert e5==(! & ?);
~ > assert e5==(! & ?);
assert e6==(1 & !);
~ > assert e6==(1 & !);
assert e7==(? & !);
~ > assert e7==(? & !);
assert e8==(! | !);
~ > assert e8==(! | !);
assert e9==(! ^ 1);
~ > assert e9==(! ^ 1);

show -cells;
~ > show -cells;
~ @ = # == node 
~ r1 = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ! == (!^1)
~ e8 = !
~ e7 = !
~ e6 = !
~ e5 = !
~ e4 = !
~ e3 = !
~ e2 = !
~ e1 = !

# Test with variable numbers
~ > # Test with variable numbers

assert t=1;
~ > assert t=1;
assert f=!;
~ > assert f=!;

assert e1==(f    );
~ > assert e1==(f    );
assert e2==(not t);
~ > assert e2==(not t);
assert e3==(f & f);
~ > assert e3==(f & f);
assert e4==(f & t);
~ > assert e4==(f & t);
assert e5==(f & ?);
~ > assert e5==(f & ?);
assert e6==(t & f);
~ > assert e6==(t & f);
assert e7==(? & f);
~ > assert e7==(? & f);
assert e8==(f | f);
~ > assert e8==(f | f);
assert e9==(f ^ t);
~ > assert e9==(f ^ t);

show -cells;
~ > show -cells;
~ @ = # == node 
~ f = !
~ t = 1
~ r1 = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ! == (f^t)
~ e8 = ! == (f|f)
~ e7 = ! == (?&f)
~ e6 = ! == (t&f)
~ e5 = ! == (f&?)
~ e4 = ! == (f&t)
~ e3 = ! == (f&f)
~ e2 = ! == (!t)
~ e1 = ! == f

# Test with literal string (Can only represent true conditions)
~ > # Test with literal string (Can only represent true conditions)

assert e1==( !       );
~ > assert e1==( !       );
assert e2==(not "a"  );
~ > assert e2==(not "a"  );
assert e3==( !  &  ! );
~ > assert e3==( !  &  ! );
assert e4==( !  & "a");
~ > assert e4==( !  & "a");
assert e5==( !  &  ? );
~ > assert e5==( !  &  ? );
assert e6==("a" &  ! );
~ > assert e6==("a" &  ! );
assert e7==( ?  &  ! );
~ > assert e7==( ?  &  ! );
assert e8==( !  |  ! );
~ > assert e8==( !  |  ! );
assert e9==( !  ^ "a");
~ > assert e9==( !  ^ "a");

show -cells;
~ > show -cells;
~ @ = # == node 
~ f = !
~ t = 1
~ r1 = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ! == (!^"a")
~ e8 = !
~ e7 = !
~ e6 = !
~ e5 = !
~ e4 = !
~ e3 = !
~ e2 = !
~ e1 = !

# Test with variable string
~ > # Test with variable string

assert a="a";
~ > assert a="a";

assert e1==(f    );
~ > assert e1==(f    );
assert e2==(not a);
~ > assert e2==(not a);
assert e3==(f & f);
~ > assert e3==(f & f);
assert e4==(f & a);
~ > assert e4==(f & a);
assert e5==(f & ?);
~ > assert e5==(f & ?);
assert e6==(a & f);
~ > assert e6==(a & f);
assert e7==(? & f);
~ > assert e7==(? & f);
assert e8==(f | f);
~ > assert e8==(f | f);
assert e9==(f ^ a);
~ > assert e9==(f ^ a);

show -cells
~ > show -cells
~ @ = # == node 
~ a = "a"
~ f = !
~ t = 1
~ r1 = # == on(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = ! == (f^a)
~ e8 = ! == (f|f)
~ e7 = ! == (?&f)
~ e6 = ! == (a&f)
~ e5 = ! == (f&?)
~ e4 = ! == (f&a)
~ e3 = ! == (f&f)
~ e2 = ! == (!a)
~ e1 = ! == f

# Verify that all e1-e9 cells above have a value of !
~ > # Verify that all e1-e9 cells above have a value of !
