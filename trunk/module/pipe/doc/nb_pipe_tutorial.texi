@c Pipe tutorial
@c   A section to the NodeBrain Tutorial and Pipe Nodebrain Module docs.

@quotation
@i{To listen closely and reply well is the highest perfection we are able to attain in the art of conversation.}
---Francois de La Rochefoucauld (1613--1680)
@end quotation

To construct a successful NodeBrain application, you must configure NodeBrain to listen closely and respond well.  The @i{Operating Mode} tutorial" illustrates how NodeBrain can listen for input commands from @code{stdin} and both input commands and error messages from servant scripts.   NodeBrain's ability to listen is controlled by a component called the @i{medulla.}  Node modules interface with the medulla to extend NodeBrain's ability to listen to include other sources of input.  

A pipe node is perhaps the simplest of listening nodes.  It listens to a FIFO (named pipe) file, and you can write to the pipe using any program you like, including an @code{echo} command.

@section Defining Pipe Server Nodes

To begin this tutorial, createan agent script called @code{smokey.nb} with two pipe server nodes as shown here.

@cartouche
@smallexample
#!/usr/local/bin/nb -d
# File: tutorial/Pipe/smokey.nb
-rm smokey.log
setlog="smokey.log",out=".";
@b{declare jed identity guest;}
@b{declare chief identity owner;}
@b{define corncob node pipe.server("jed@@corncob");}
corncob.define r1 on(a=1 and b=2);
@b{define peace node pipe.server("chief@@peace");}
peace.define r1 on(a=1 and b=2);
@end smallexample
@end cartouche

The argument to a @code{pipe.server} is of the form "@i{identity}@@@i{pipe}".
Identities are associated with listening nodes to limit the types of commands the interpreter will accept from the node.  In this example, you associate the identity @code{jed} with the corncob pipe, and the identity @code{chief} with the peace pipe.
You have declared @code{jed} to be a guest and @code{chief} to be an owner.  A guest can only connect and issue @code{show} commands---like read only access.
An owner can issue any command, including shell commands, which means they have all permissions of the user that started the agent.  For this reason, pipes are created with owner-only read/write permissions.
However, if you declare the associated identity to be a "peer," you can give other user's write permission on the pipe.
They will be able to issue assertions and alerts but not modify your rules or issue shell commands.
You must still think through how the agent will respond to their assertions.
For example, if you create a rule that reboots the system when @code{a=1}, then letting someone assert @code{a=1} is the same as letting them reboot the system.

@section Starting Pipe Server Agent

Now let's start the agent.  This script is executable because the @code{-d} (daemon) option is specificied on the she-bang line.  So you can just execute it like any executable and it will load the rules and go into the background (daemonize).

@cartouche
@smallexample
$ ./smokey.nb
2008/06/1017:09:16 NB000I Argument [1] -d
2008/06/1017:09:16 NB000I Argument [2] ./smokey.nb
> #!/usr/local/bin/nb -d
> # File: smokey.nb
> -rm smokey.log
[13993]Started: -rm smokey.log
[13993]Exit(0)
> set log="smokey.log",out=".";
2008/06/1017:09:16 NB000I NodeBrain nb will log to smokey.log
> declare jed identity guest;
> declare chief identity owner;
> define corncob node pipe.server("jed@@corncob");
> corncob. define r1 on(a=1 and b=2);
> define peace node pipe.server("chief@@peace");
> peace. define r1 on(a=1 and b=2);
2008/06/1017:09:16 NB000I Source file "./smokey.nb" included. size=323
2008/06/1017:09:16 NB000I NodeBrain nb[13992,4118] daemonizing
$
@end smallexample
@end cartouche

@section Sending Commands to Pipe Server Nodes

Use the @code{echo} command to send NodeBrain commands to the pipe servers.

@cartouche
@smallexample
$ echo stop > corncob
$ echo stop > peace
@end smallexample
@end cartouche

The log file shows you what happened.

@cartouche
@smallexample
$ @b{cat smokey.log}

N o d e B r a i n   0.8.17 (Dopey) 2014-04-10

Compiled Jul  6 2014 21:00:54 x86_64-unknown-linux-gnu

Copyright (C) 2014 Ed Trettevik <eat@@nodebrain.org>
MIT or NodeBrain License
----------------------------------------------------------------

/usr/local/bin/nb -d ./smokey.nb

Date       Time     Message
---------- ----------------------------------------------------
2014/06/10 17:09:16 NB000I NodeBrain nb[13994:1] myuser@@myhost
2014/06/10 17:09:16 NB000I Agent log is smokey.log
2014/06/10 17:09:16 NM000I pipe.server peace: Listening for FIFO connections as chief@@peace
2014/06/10 17:09:16 NM000I pipe.server corncob: @dots{}
@dots{} Listening for FIFO connections as jed@@corncob
2014/06/10 17:41:11 NM000I pipe.server corncob: FIFO jed@@corncob
> corncob. stop
2014/06/10 17:41:11 NB000E @b{Identity "jed" does not have authority to issue stop command.}
2014/06/10 17:41:19 NM000I pipe.server peace: FIFO chief@@peace
> peace. stop
2014/06/10 17:41:19 NB000I NodeBrain nb[13994] terminating - exit code=0
$
@end smallexample
@end cartouche

Notice that when you sent a @code{stop} command to the corncob pipe, you didn't have the needed authority, but when you sent the same @code{stop} command to the peace pipe it worked.  
  
Run @code{smokey.nb} again with the following commands to see what happens.

@cartouche
@smallexample
$ ./smokey.nb
$ echo "common. define r1 on(a=1 and b=2);" > peace
$ echo "common. assert a=1,b=3;" > peace
$ echo "common. assert b=2;" > peace
$ echo "common. show -t" > peace
$ echo "stop" > peace
$ cat smokey.log
@end smallexample
@end cartouche

