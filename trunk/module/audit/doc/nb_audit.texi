\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename nb_audit.info
@include version.texi
@settitle Audit NodeBrain Module
@c %**end of header

@finalout
@paragraphindent none
@setchapternewpage odd

@copying
Audit NodeBrain Module@*
July 2014@*
NodeBrain Open Source Project

@sp 2
@b{Release @value{RELEASE}}

Author: Ed Trettevik

Copyright @copyright{} 2014 Ed Trettevik <eat@@nodebrain.org>

@sp 1
Permission is granted to copy, distribute and/or modify this document under the terms of either the MIT License (Expat) or the NodeBrain License.
@sp 1
@include ../../../doc/licenses.texi
@end copying

@iftex
@titlepage
@c @image{./image001,32pt,32pt,,gif}

@titlefont{Audit NodeBrain Module}
@sp 1
@tex
\vskip4pt \hrule height 3pt width \hsize
@end tex
@sp 3
@b{Release @value{RELEASE}}
@page
@vskip 0pt plus 1filll
@insertcopying

@c History Preface and Document Conventions 
@page
@b{History}

@multitable {-------------} {--------------------------------------------------------------------------------------------------------}
@item 2012-06-04 @tab
Title: @i{Audit NodeBrain Module}@*  
Author: Ed  Trettevik <eat@@nodebrain.org>@*
Publisher: NodeBrain Open Source Project

@item 2012-06-04 @tab
Release 0.8.10
@itemize @bullet
@item This is a first edition.
@end itemize

@end multitable

@page
@b{Preface}

@sp 1
This manual is intended for users of the Audit NodeBrain Module, a plug-in for monitoring system and application log files.
The reader is expected to be familiar with the basic concepts of NodeBrain.  See www.nodebrain.org for general information
on NodeBrain.
@sp 1
The function this module performs was included in the original prototype of NodeBrain as a "log listener", but the code was
later removed from the intepreter and repackaged as the Audit module.  

@include conventions.texi

@end titlepage

@end iftex

@c ----------------------------------------------------------
@c Not printed document

@ifnottex
@node Top
@top Audit NodeBrain Module

This manual is for the Audit NodeBrain Module (version @value{VERSION}, @value{UPDATED-MONTH}) used to monitor system and application log files.
@*@*
Copyright @copyright{} 2014 Ed Trettevik <eat@@nodebrain.org>
@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of either the MIT License (Expat) or NodeBrain License.
See the @i{Licenses} section at the end of this document for details.
@end quotation
@ifnotplaintext
@b{Short Table Of Contents}
@menu
* Concepts:: Foundation
* Tutorial:: Introduction by Example
* Commands:: Syntax and Semantics
* Triggers:: Conditions and Response
@end menu
@menu
* Licenses::
* Index::
@end menu
@end ifnotplaintext
@end ifnottex

@c Set page footings
@oddfooting @thistitle @| @| @thispage
@evenfooting @thispage @| @| @thistitle

@c Contents
@oddheading @| @| 
@evenheading @| @|
@contents

@c Set page headings for document
@oddheading @thischapter @| @| @value{UPDATED-MONTH}
@evenheading @value{UPDATED-MONTH} @| @| @thischapter

@node Concepts
@chapter Concepts
@cindex Concepts

The Audit module implements nodes that monitor lines of text written to system and application log files.
This enables event monitoring in situations where an application provides no other mechanism for communicating events to a monitoring system.  

@section Translators
NodeBrain translators are used to convert a sequence of text strings into a sequence of NodeBrain commands.
Regular expressions are used to find specific patterns of text and matching strings are combined with new text to construct NodeBrain commands.
An Audit node follows the end of a growing text file and passes each new line into a configured translator. 
See the @i{NodeBrain Language Reference} for information on coding translators.

@section Log File Rotation
@cindex log file rotation
An enabled Audit node opens the log file on a scheduled frequency and reads from the last end-of-file to the new end-of-file
and closes the file.  Before reading, the new size of the file is checked.  If the file is smaller than the last time, the Audit node starts over and reads from the beginning of the file.

@section Missed Messages
@cindex missed messages
New lines in a log file are only monitored by an Audit node while the node is enabled (listening).
If the node is disabled or the NodeBrain agent is stopped, new lines are ignored and never processed.
When the agent is restarted and/or the node is enabled, subsequent new lines will be monitored.
An option to maintain a separate cursor file providing the offset of the next line to monitor, with a check for log rotation based on inode will be included in a future release.

It is also possible for a log file to rotate and fill fast enough to become larger than the size it was the last time the Audit node read to end-of-file.  This is unlikely, but possible if the log file in uneven bursts and the Audit node's polling frequency is too slow relative to the rotation frequency.

If your application can not tolerate missed messages, however seldom, you should select a different option than the Audit node for getting messages into NodeBrain.  It is sufficient for many situations, but not all.

@node Tutorial
@chapter Tutorial
@cindex tutorial
@include nb_audit_tutorial.texi

@node Commands
@chapter Commands
@cindex commands

This section describes commands used with an Audit node.
 
@section Define
@cindex define command

The @command{define} command is used to create an Audit node.
 

@cartouche
@*
@b{Syntax}
@multitable {---------------------} {-------------------------------------------------------------------------}
@item @i{auditDefineCmd}
@tab ::= @b{define} @ringaccent{s} @i{term} @ringaccent{s} @b{node} [ @ringaccent{s} @i{auditDef} ] @bullet{}
@item @i{auditDef}
@tab ::= @b{audit(}"@i{filename}","@i{translatorName}",@i{schedule}@b{)};
@item @i{filename}
@tab ::= name of file to audit
@item @i{translatorName}
@tab ::= name of translator file (*.nbx)
@item @i{schedule}
@tab ::= @i{cellExpression}
@end multitable		 
@end cartouche

@*
The @i{filename} and @i{translatorName} arguments may be any cell expression that resolves to a string value containing a filename. The value at definition time is used. An audit node will not response to or recognize changes to the value of expressions for these parameters.

The @i{translatorName} by convention has a ".nbx" suffix. See "Translators" under the @command{DEFINE} command in the @i{NodeBrain Language Reference} for instructions on coding translator files.

The schedule parameter may be any cell expression. New lines in the audit file are translated each time the schedule parameter transitions to TRUE. Normally a time condition is used to check the audit file for new lines on a periodic basis (e.g., every 10 seconds) as show in the following example.

@cartouche
@smallexample
define logaudit node audit("/var/adm/messages","messages.nbx",~(10s));
@end smallexample
@end cartouche

@section Assert
@cindex assert command

Assertions are not supported by this module.

@section Disable
@cindex disable command

The @command{disable} commands may be used to stop the node from listening for syslog messages on the specified port.

@cartouche
@smallexample
disable @i{node};
@end smallexample
@end cartouche

@section Enable
@cindex enable command

The @command{enable} command may be used to start listening for syslog messages on the specified port.

@cartouche
@smallexample
enable @i{node};
@end smallexample
@end cartouche

An Audit node is automatically enabled when an agent goes into background mode (daemonizes).  So the enable command is
only required if you want to enable it when running in a different mode, or to re-enable the node after it has been
disabled.

@section Node Commands
@cindex node commands


A trace mode can be toggled on or off to assist in debugging translator rules. When trace is on, lines from the file are displayed when processed.

@cartouche
@smallexample
@i{node}:@b{trace}
@i{node}:@b{notrace}
@end smallexample
@end cartouche

@section Module Commands

The Audit module currently implements no module commands.

@node Triggers
@chapter Triggers
@cindex triggers

All the triggers of an audit node are implemented by the specified translator.
Because all commands generated by an audit node's translator are interpreted within the audit node's context, it is necessary to design the rules to work in concert with the translator. If the translator generates @command{alert} commands, you will want @command{if} rules. If the translator generates @command{assert} commands, you will want @command{on} rules. It is not actually necessary to define rules within the audit node context. As an alternative, the translator may use a context prefix to direct commands to a different context. One common possibility is to define multiple audit nodes as children of a common node and have each audit node generate commands to the parent node. It is also common to use translators that generate commands to a variety of other nodes. 


@ifnottex
@node Licenses
@unnumbered Licenses

NodeBrain is free software; you can modify and/or redistribute it, including this document, under the
terms of either the MIT License (Expat) or the NodeBrain License.

@sp 1
@include ../../../doc/licenses.texi
@end ifnottex

@node Index
@unnumbered Index 
@printindex cp 
@bye 

