\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename nb_toy.info
@include version.texi
@settitle Toy NodeBrain Module
@c %**end of header

@finalout
@paragraphindent none
@setchapternewpage odd

@copying
Toy NodeBrain Module@*
July 2014@*
NodeBrain Open Source Project

@sp 2
@b{Release @value{RELEASE}}

Author: Ed Trettevik

Copyright @copyright{} 2014 Ed Trettevik <eat@@nodebrain.org>

@sp 1
Permission is granted to copy, distribute and/or modify this document under the terms of either the MIT License (Expat) or the NodeBrain License.
@sp 1
@include ../../../doc/licenses.texi
@end copying

@iftex
@titlepage
@c @image{./image001,32pt,32pt,,gif}

@titlefont{Toy NodeBrain Module}
@sp 1
@tex
\vskip4pt \hrule height 3pt width \hsize
@end tex
@sp 3
@b{Release @value{RELEASE}}
@page
@vskip 0pt plus 1filll
@insertcopying

@c History Preface and Document Conventions 
@page
@b{History}

@multitable {-------------} {--------------------------------------------------------------------------------------------------------}
@item 2005-10-12 @tab
Title: @i{NodeBrain  Tutorial}@*  
Author: Ed  Trettevik <eat@@nodebrain.org>@*
Publisher: NodeBrain Open Source Project

@item 2010-12-31 @tab
Release 0.8.3
@itemize @bullet
@item Updates - still needed
@end itemize

@end multitable

@page
@b{Preface}

@sp 1
This module is intended for readers seeking an introduction to NodeBrain through a series of simple examples. Other documents are available for readers looking for a more complete reference to the rule language, modules, or API (application programmatic interface).

The intent of the examples is to illustrate individual concepts, not to provide complete working applications or show all related options. We avoid formal syntax descriptions, thinking you are here because you want to figure it out from examples.  

See www.nodebrain.org for more information and the latest update to this document.

@include conventions.texi

@end titlepage

@end iftex

@c ----------------------------------------------------------
@c Not printed document

@ifnottex
@node Top
@top NodeBrain Tutorial @value{VERSION}

This tutorial is for NodeBrain (version @value{VERSION}, @value{UPDATED}), an open source agent for state and event monitoring.

Copyright @copyright{} 2014 Ed Trettevik <eat@@nodebrain.org>
@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of either the MIT License (Expat) or NodeBrain License.
See the @i{Licenses} section at the end of this document for details.
@end quotation

@ifnotplaintext
@b{Rule Engine Tutorials}
@end ifnotplaintext
@menu
@end menu

@ifnotplaintext
@b{Node Module Tutorials}
@end ifnotplaintext
@menu
@end menu

@ifnotplaintext
@b{References}
@end ifnotplaintext
@menu
* Licenses::
* Index::
@end menu
@end ifnottex

@c Set page footings
@oddfooting @thistitle @| @| @thispage
@evenfooting @thispage @| @| @thistitle

@c Contents
@oddheading @| @| 
@evenheading @| @|
@contents

@c Set page headings for document
@oddheading @thischapter @| @| @value{UPDATED-MONTH}
@evenheading @value{UPDATED-MONTH} @| @| @thischapter
@section Toy Module
@cindex toy module


The Toy module is only included in the distribution as an example for programmers writing their own node modules. It is simple in function to keep the example code simple, making it of little value for application.

This module provides three trivial skills: Sum, Add, and Count. Actually, Add is just an alias for Sum, illustrating how multiple skills can share methods. The following two files should have come with your distribution for experimenting with the Toy skills.

@example	
	#!/usr/local/bin/nb
	# toyRules.nb
	declare toy module /usr/local/lib/nb_toy.so;     
	declare sum skill toy.sum;
	declare count skill toy.count;

	define sum node sum;
	define add node toy.add;
	# Try uncommenting the following line if rule r2 does not file
   	# using the events in toyEvents.nb
	# assert a=0;
	define aisoneCounter node count(a=1);
	define aistrueCounter node count(a);

	define r1 on(sum(a,b)>5 and add(a,b,c)<20);
	define r2 on(aisoneCounter>2);
	define r3 on(aistrueCounter>2);
	----------------------------------------------------------------------------
	# toyEvents.nb 
	assert a=1,b=2,c=3;
	assert a=0;
	assert a=10;	# r1 should fire
	assert a=0;
	assert a=1;    # r3 should fire
	assert a=0;
	assert a=1;	# r2 should fire
	assert a=5;	# r1 should fire
	show aisoneCounter;
	assert aisoneCounter()=0;      # reset counter */
	show aisoneCounter;
@end example
You can run a test with either of the following commands.

@example
	./toyRules.nb toyEvents.nb
	    -or-
	nb toyRules.nb toyEvents.nb
@end example

Now what’s going on here? The Sum and Add skills compute the sum of numeric arguments plus the sum of the lengths of string arguments. When an argument changes, the node conditions sum(a,b) and add(a,b,c) are reevaluated to adjust their values. This changes the rule condition for r1, causing it to fire each time the condition transitions to true.

The Count skill increments a counter every time the condition specified in the node definition transitions to true. As the aisoneCounter in the sample rules increments, the r2 rule condition is reevaluated. When it transitions to True, r2 fires. The strange looking assertion aisoneCounter()=0 is used to reset the counter. This skill ignores arguments to an assertion, using only the assigned value to set the counter. The following strange assertions are also possible.

@example
	assert aisoneCounter();	# set counter to 1  (True)
	assert !aisoneCounter();	# set counter to 0  (False)
	assert aisoneCounter()=10; # set counter to 10
@end example

These sample skills are useful for illustrating the way a node module can add functionality to NodeBrain without modifying nb. However, they are not very impressive skills, and when you look at the source code you might wonder if the effort to create a node module is worth the benefit. But keep in mind, the complexity of the API calls is not proportional to the complexity of the skill you are implementing. Trivial examples like these have a much greater percent of overhead in the API. You can start with one of these examples and create a very useful node module without having to touch the API calls much---depending on your requirements. In most cases, the bulk of the complexity should be in the code you write to perform the internal function of the module, not in API calls to NodeBrain.

@ifnottex
@node Licenses
@unnumbered Licenses

NodeBrain is free software; you can modify and/or redistribute it, including this document, under the
terms of either the MIT License (Expat) or the NodeBrain License.

@sp 1
@include ../../../doc/licenses.texi
@end ifnottex

@node Index
@unnumbered Index
@printindex cp
@bye  
