.\" Process this file with "groff -man -Tascii foo.1" or "nbman2ht foo.1"
.\" See NodeBrain Developer's Guide for project standards
.\"
.TH nbkit.caboodle 7 "April 2013" "NodeBrain 0.8.15" "NodeBrain Administrator Guide"
.SH NAME
\fBnbkit.caboodle\fP - NodeBrain Kit and Caboodle Framework
.SH SYNOPSIS
\fBnbkit\fP \fIcaboodle\fP { \fBstart\fP | \fBstop\fP | \fBbounce\fP | ... } \fBCaboodle\fP

.SH DESCRIPTION
The \fBNodeBrain Kit and Caboodle Framework\fP is a method of managing NodeBrain applications.
The \fBnbkit\fP(1) command works with a \fBNodeBrain caboodle\fP constructed from \fBNodeBrain kits\fP.
The \fBCaboodle NodeBrain Kit\fP provides an initial set of components for managing NodeBrain applications as caboodles.
While NodeBrain is a rule engine that can be used however you like, NodeBrain kits
conform to this framework to provide a quick path
to a working application.  You are encouraged to build applications and application kits based on this framework,
unless you find or create a framework that works better for your application.

The following common terms have a specific meaning within the context of the NodeBrain Kit and Caboodle Framework.
.IP \fBcaboodle\fP 11
A directory containing a collection of components organized into
a predefined set of subdirectories.  Components make reference to other components using paths
relative to the caboodle root directory.  This makes a caboodle portable.

.IP \fBkit\fP
A collection of components organized like a caboodle, but intended
for distribution and used to construct caboodles or add functionality to existing caboodles.
A caboodle may be composed from multiple kits.

.IP \fBagent\fP
A NodeBrain script that runs as a background process, or daemon.

.IP \fBplan\fP
An XML document used to represent a set of NodeBrain rules or configuration files based on
a translation scheme.  A plan compiler converts a plan from XML document format into a target format, often
NodeBrain rules.

.IP \fBadapter\fP
A script or program that adapts a caboodle component to another application or specifc environment. For example,
adapters may be used to send alarms to syslog, email to administrators, and SNMP traps to downstream systems.

.IP \fBservant\fP
A script or program that runs as a child to NodeBrain to perform a function for which another
programming language is preferred.  Servants may communicate with NodeBrain on stdin, stdout, and stderr.

.P
.SH DIRECTORIES
Within a caboodle there are several subdirectories with a defined purpose.
All components within a caboodle must assume the caboodle
is the working directory and reference other components via a relative path
to maintain portability of the caboodle.

The Caboodle NodeBrain Kit does not make use of all the directories listed
below.  Some are defined only to provide guidance for other kits.

.IP \fB.nb\fP 11
A special directory for use by the nb (NodeBrain interpreter) command.
If a \fBcaboodle.nb\fP file is found in this directory, NodeBrain
sources it at startup.  Variables defined here may be used within
rule files to adapt to a particular instance of a caboodle for a given
application, where other components are shared by all instances.

This is the only directory within a caboodle of which the NodeBrain
interpreter seems to have some awareness.  In fact, the NodeBrain
interpreter has no awareness of caboodles.  It simply supports
a \fB.nb\fP directory in the working directory, and the caboodle concept
depends on the caboodle being the working directory when the interpeter
and all other components are invoked.

This directory should not be used by components other than NodeBrain
and node modules to avoid naming conflicts.

.IP \fBadapter\fP
Commands that adapt a NodeBrain application component
to specific interface requirements.
For example, alarm adapters can be included here to adapt alarms to a particular protocol
or to an external event management system interface.

.IP \fBagent\fP
NodeBrain agent scripts.
It is best to manage agents using an agent plan, in which case
the agent script in this directory will be generated for you by
the agent compiler.  This directory also has files that identify
the expected state of each agent.

.IP \fBbin\fP
Used for commands that do not fall into
the categories for which other directories are defined.
See \fBadapter\fP, \fBagent\fP, \fBexit\fP, and \fBservant\fP directories.

.IP \fBcache\fP
This directory has subdirectories that contain
files used to cache information for a limited
duration to avoid more expensive lookup, often where lookup may be
relatively frequent.
In cases where deleting the data would impact more than just the performance
hit of having to perform a more expensive lookup, the \fBvar\fP directory should
be used instead.

.IP \fBconfig\fP
This directoy may continue configuration files that are unique
to a given caboodle.
However, this directory is deprecated and you
should use the \fBetc\fP directory for all new configuration
files.

.IP \fBetc\fP
Configuration files unique to a given caboodle amongst multiple
caboodles synchronizing other components via a version control system.
Since it is not appropriate to version control this file
in a repository shared by other caboodles, it is sometimes
helpful to manage these files using plans with compilers that
can be directed to produce files in this directory based on
symbolic variables and conditional compilation.
See the \fB.nb\fP and \fBplan\fP directories.

.IP \fBexit\fP
Commands that communicate a result via their exit code only.
Unlike servants, these commands are normally not designed for
use with NodeBrain.  However, their exit code may identity the state
of a monitored element, making it easy to map the exit code
into a NodeBrain assertion.

.IP \fBkit\fP
Used to manage kit dependencies.  This directory is reserved
for the nbkit command and should not be used by other kit
components.

.IP \fBlib\fP
Libraries and Perl modules supporting other kit components.
As with all caboodle components, these components must be
referenced using a relative path to maitain portability of
the caboodle.

.IP \fBlog\fP
Log files for agents and other kit components.
NodeBrain agents normally manage the rotation, compression,
and deletion of their log files.  When including other
log files here, remember to provide the necessary management
to avoid filling up your file system.  Consider using the
Caboodle agent to manage additional log files unless you
have a more convenient method.

.IP \fBmessage\fP
Used by the Message module and other modules using
the NodeBrain Message Log API.  Do not use this directory
for other purposed.

.IP \fBmsg\fP
Used by alarm
adapters (e.g. adapter/mail.alarm) that lookup and include
a description of the alarm 
condition and  response instructions. Subdirecties
are defined for logical sets of alarms identified by
the first three or four characters of a message
identifier.  For example a message CAB0001 would
be described in the CAB subdirectory in a file named
CAB0001.
Within the message set subdirectory (e.g. CAB)
additional files provide header, footer, and missing
file text.

.IP \fBout\fP
Output files produced by commands issued by
NodeBrain when the output is not redirected.
These files are retained for a few
days for troubleshooting. 

.IP \fBpipe\fP
FIFO files for sending commands to Pipe nodes in NodeBrain agents
or for communicating between other caboodle components.

.IP \fBplan\fP
Contains a subdirectory for each plan, including
the XML document, plan relationship files, and normally any files generated
from the XML document by the associated compiler.
In some cases the generated files go to another directory
(e.g. \fPetc\fP) that does not share the same version
control repository used by the plan directory.

.IP \fBqueue\fP
This directory contains subdirectories for Peer module
gueues.  This mechanism is deprecated and a future release of
the Peer module will switch to message logs.
NodeBrain message logs
provide a more efficient method of sending events between
agents and are currently supported by the Message module.  
See the Message module manual for more info.

.IP \fBsecurity\fP
Contains certificates and access lists.

.IP \fBservant\fP
Contains servant commands that output
NodeBrain commands to stdout. Commands that
do not conform to this standard belong in
bin, adapter, or exit. Servant commands may optionally
accept commands from NodeBrain on stdin and report
error conditions on stderr. 

.IP \fBsetup\fP
Setup components.  A kit may provide components in this
directory for setting up an application.

.IP \fBsocket\fP
Local domain socket files for communication between
NodeBrain processes using the Peer module.  This directory
may also be used for communication between other caboodle
components that use local domain socket files.

.IP \fBuser\fP
Application user files.  This directory is for
storing user preferences and other user related
information. There is no recommendation on how to
organized user data in this directory.

.IP \fBvar\fP
Data files used in the normal operation of a NodeBrain application.
Use the \fBcache\fP directory for temporary caching of  data obtained from a more authoritive source.

.IP \fBweb\fP
Web content and scripts for web based tools.
Individual tools should use sub-directories.
For example, the NodeBrain planner uses the "planner"
subdirectory and the Webster modules uses the
"webster" subdirectory by default.

.P
.SH VERSION CONTROL
It is a recommended practice to put the following caboodle subdirectories under version control.

    adapter, bin, exit, lib, msg, plan, servant, user, and web 

When a NodeBrain application is distributed over multiple instances of like caboodles, a version control
system may be used to provide synchronization of NodeBrain rules and other caboodle components.
Using this approach, the recommended directories are checked out at each instance of the caboodle.  A
caboodle is then a working directory where only a subset of the directories a under version control.
Changes at one instance of the caboodle can be commit to the repository with an update performed at the
other instances to pick up the same changes.  NodeBrain application used to
monitor a group of like servers that required the same set of monitoring rules and components would be
a good candidate for this approach.  In this case it is best to identify a master caboodle where the updates
are applied first.  This helps to avoid conflicts that can easily occur in the plan XML documents because
of the way the NodeBrain planner time stamps some of the XML elements.

.P
.SH HISTORY
Work on the Caboodle NodeBrain Kit began in June of 2006, defining the NodeBrain Kit and Caboodle Framework.
It is based on a tool developed at The Boeing Company in 1998 called the "System Monitor Kit", or "Sysmon".
The NodeBrain program, \fBnb\fP(1), was first developed for Sysmon and then released as a single
component in 2003 by the NodeBrain Open Source Project.  NodeBrain kits were first released by the
project in February of 2013.

.SH BUGS
With prototype 0.8.x releases you can expect to encounter bugs that are unknown to the author.
Please report bugs by linking to the project page from the home page, 
http://www.nodebrain.org, or send email to <bugs@nodebrain.org>.
.SH AUTHOR
Ed Trettevik <eat@nodebrain.org>
.SH SEE ALSO
.\"ht page
\fBnbkit\fP(1),
.\"ht page
\fBnb.man\fP(1)
.\"ht page
\fBnb\fP(1)

.\"ht doc
[1]
.I NodeBrain Home Page 
- http://www.nodebrain.org 

.\"ht doc
[2]
.I Caboodle NodeBrain Kit Manual 
- http://www.nodebrain.org 
