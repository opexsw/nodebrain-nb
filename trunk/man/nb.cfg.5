.\" Process this file with "groff -man -Tascii foo.1" or "nbman2ht foo.1"
.\" See NodeBrain Developer Guide for project standards
.\"
.TH nb.cfg 5 "August 2014" "NodeBrain 0.8.17" "NodeBrain Administrator Guide"
.SH NAME
nb.cfg - NodeBrain Configuration Files
.SH SYNOPSIS
.B ~/.nb/user.nb

.B .nb/caboodle.nb

.B *.nb

.SH DESCRIPTION
This primer describes basic NodeBrain configuration concepts.  For a
more complete understanding of individual commands, refer to the
\fINodeBrain Language Reference\fP available at http://www.nodebrain.org. 

We call a NodeBrain application directory a \fBcaboodle\fP.  NodeBrain does not dictate
the structure of a caboodle, but we assume it is organized logically as a set of sub-directories
containing rule files, event collector servants, alarm adapters, log files, etc.  It is best
to make file references relative to a caboodle's root directory so components can be easily
used in multiple caboodles without modification.

When \fBnb\fP(1) starts, it first processes an optional user profile \fB~/.nb/user.nb\fP, if found.
It then processes an optional caboodle profile \fB.nb/caboodle.nb\fP, if found.
The syntax of these files is the same as any *.nb rule file.  They are only special because
they are processed without explicit reference, and they are not listed when processed.
Other NodeBrain *.nb rule files are processed when explicitly referenced as an executable
script, a file argument, or included by another rule file.

The user profile should contain declarations and definitions you always want to be available
when executing \fBnb\fP(1) as a given user.  The caboodle profile should contain declarations
and definitions you want to be available when executing \fBnb\fP(1) within a given
caboodle.  
NodeBrain doesn't care how other *.nb files are constructed, organized and managed.  However, we
assume that a caboodle is structured in some way and perhaps supported by a set of tools that
simplify rule development and maintenance.  

.SH COMMANDS
Examples of commands you will want to understand for basic NodeBrain configuration are introduced here.

Identities are typically declared in \fB~/.nb/user.nb\fP or \fB.nb/caboodle.nb\fP files because
they are needed by multiple NodeBrain scripts in most applications.

.nf
  declare \fIidentity\fP identity \fIrank\fP;
.fi

Identities are used by nodes that support communication with other applications or
other instances of NodeBrain. 
Authentication is the responsibility
of any node module providing communication with external entities.
Here's an example of a "peer.client" node that uses an
identity for authentication and authorization. 
Refer to the \fIPeer NodeBrain Module\fP manual for more information.

.nf
  # define a peer node
  define \fInode\fP node peer.client("\fIidentity\fP@\fIhost\fP:\fIport\fP");
.fi

Use the SOURCE or %INCLUDE command to include commands from another file.
This helps to organize rules into logical sets for maintenance and reuse. 

.nf
  # source commands from another file
  source \fIfile\fP,[\fIassertions\fP];

          - or -

  %include \fIfile\fP,[\fIassertions\fP];
.fi

The
.\"ht page
\fBnb.syn\fP(5) man page provides more information on command syntax.
You should at least scan it if you plan to do anything with NodeBrain application
rule files (\fI*\fP.nb).

.SH ENVIRONMENT
Some of the C functions nb
calls (e.g. for loading dynamic modules) are influenced by environment variables in
ways we assume you can figure out for your environment.
.IP NB_MODULE_PATH
The NB_MODULE_PATH variable provides a platform independent way of specifying a path
for locating NodeBrain modules.  This path overrides the native system
search paths by qualifying module names so that a search is avoided.  The following
example illustrates a setting that directs NodeBrain to search the current directory
first and then the parent directory when loading modules (plug-ins).
.IP
.nf
NB_MODULE_PATH="./:../" nb myscript.nb
.fi
.P
.SH DIAGNOSTICS
When errors are found in configuration files, NodeBrain displays
an error message. Because user and caboodle profile 
lines are not displayed, it may be difficult to identify the line causing the error.
To work around this problem you can rename your profile and execute it
under the new name.

.IP
.nf
$ cd ~/.nb
$ mv user.nb user.nb%
$ nb user.nb%      ... find the problem
$ vi user.nb%      ... resolve the problem
$ nb user.nb%      ... verify 
$ mv user.nb% user.nb
.fi
.P
See
.\"ht page
\fBnb\fP(1) for information on message format.
.SH "HISTORY"
The \fB~/.nb/user.nb\fP file was introduced with NodeBrain Protocol (NBP) client authentication in March, 2000, although it was originally called private.nb and renamed in version 0.7.1.  This file is now more general and no longer associated with NBP which has moved to the Peer module.

The \fB.nb/caboodle.nb\fP file was introduced in version 0.7.1 in July, 2008.

.SH BUGS
There are no known bugs in the processing of configuration files.
Please report bugs by linking to the project page from the home page, 
http://www.nodebrain.org, or send email to <bugs@nodebrain.org>.
.SH AUTHOR
Ed Trettevik <eat@nodebrain.org>
.SH "SEE ALSO"
.\"ht page
\fBnodebrain\fP(7),
.\"ht page
\fBnb\fP(1),
.\"ht page
\fBnb.syn\fP(5),
.\"ht page
\fBnb.mod\fP(7),
.\"ht page
\fBnb.lib\fP(3) 

.\"ht doc
[1]
.I NodeBrain Home Page 
- http://www.nodebrain.org

.\"ht doc
[2]
.I NodeBrain Tutorial 
- http://www.nodebrain.org

.\"ht doc
[3]
.I NodeBrain Language Reference 
- http://www.nodebrain.org
