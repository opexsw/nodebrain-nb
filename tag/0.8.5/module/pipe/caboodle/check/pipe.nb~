# Pipe module check script
~ > # Pipe module check script

set servant;
~ > set servant;

declare pipe module {"../.libs"}; # for checking only
~ > declare pipe module {"../.libs"}; # for checking only
define pipeIn node pipe.server("default@pipe/fIfo");
~ > define pipeIn node pipe.server("default@pipe/fIfo");
enable pipeIn;
~ > enable pipeIn;
~ 1970/01/01 00:00:01 NM000I pipe.server pipeIn: Listening for FIFO connections as default@pipe/fIfo
disable pipeIn;
~ > disable pipeIn;
undefine pipeIn;
~ > undefine pipeIn;
define pipeIn node pipe.server("default@pipe/fIfo");
~ > define pipeIn node pipe.server("default@pipe/fIfo");
enable pipeIn;
~ > enable pipeIn;
~ 1970/01/01 00:00:01 NM000I pipe.server pipeIn: Listening for FIFO connections as default@pipe/fIfo

define pipeOut node pipe("pipe/fifO");
~ > define pipeOut node pipe("pipe/fifO");
enable pipeOut;
~ > enable pipeOut;

define exit on(stop):stop;
~ > define exit on(stop):stop;

-if test ! -p "pipe/fifO"; then mkfifo pipe/fifO; fi
~ > -if test ! -p "pipe/fifO"; then mkfifo pipe/fifO; fi
~ [0] Started: -if test ! -p "pipe/fifO"; then mkfifo pipe/fifO; fi
~ [0] Exit(0)
=|servant/echo.sh < pipe/fifO > pipe/fIfo
~ > =|servant/echo.sh < pipe/fifO > pipe/fIfo
~ 1970/01/01 00:00:01 NB000I [0] Started: =|servant/echo.sh < pipe/fifO > pipe/fIfo

pipeOut:assert a=1;
~ > pipeOut:assert a=1;
pipeOut:assert a=2;
~ > pipeOut:assert a=2;
pipeOut:assert stop;
~ > pipeOut:assert stop;
