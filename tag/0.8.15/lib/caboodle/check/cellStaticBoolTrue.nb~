#!../nb/nb
~ > #!../nb/nb
#
~ > #
# File: cellStaticBoolTrue.nb
~ > # File: cellStaticBoolTrue.nb
#
~ > #
# Test cell static expression - Boolean True
~ > # Test cell static expression - Boolean True
#================================================
~ > #================================================

# Define rule to enable 9 cells
~ > # Define rule to enable 9 cells

define r1 if(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);
~ > define r1 if(e1 and e2 and e3 and e4 and e5 and e6 and e7 and e8 and e9);

# Test with literal numbers
~ > # Test with literal numbers

assert e1==(1    );
~ > assert e1==(1    );
assert e2==(not 0);
~ > assert e2==(not 0);
assert e3==(1 & 1);
~ > assert e3==(1 & 1);
assert e4==(1 | 0);
~ > assert e4==(1 | 0);
assert e5==(1 | ?); 
~ > assert e5==(1 | ?); 
assert e6==(0 | 1);
~ > assert e6==(0 | 1);
assert e7==(? | 1); 
~ > assert e7==(? | 1); 
assert e8==(1 | 1);
~ > assert e8==(1 | 1);
assert e9==(1 ^ 0);
~ > assert e9==(1 ^ 0);

show -cells;
~ > show -cells;
~ @ = ! == node 
~ r1 = ! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = 1 == (1^0)
~ e8 = 1
~ e7 = 1
~ e6 = 1
~ e5 = 1
~ e4 = 1
~ e3 = 1
~ e2 = 1
~ e1 = 1

# Test with variable numbers
~ > # Test with variable numbers

assert t=1;
~ > assert t=1;
assert f=0;
~ > assert f=0;

assert e1==(t    );
~ > assert e1==(t    );
assert e2==(not f);
~ > assert e2==(not f);
assert e3==(t & t);
~ > assert e3==(t & t);
assert e4==(t | f);
~ > assert e4==(t | f);
assert e5==(t | ?);
~ > assert e5==(t | ?);
assert e6==(f | t);
~ > assert e6==(f | t);
assert e7==(? | t);
~ > assert e7==(? | t);
assert e8==(t | t);
~ > assert e8==(t | t);
assert e9==(t ^ f);
~ > assert e9==(t ^ f);

show -cells;
~ > show -cells;
~ @ = ! == node 
~ f = 0
~ t = 1
~ r1 = ! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = 1 == (t^f)
~ e8 = 1 == (t|t)
~ e7 = 1 == (?|t)
~ e6 = 1 == (f|t)
~ e5 = 1 == (t|?)
~ e4 = 1 == (t|f)
~ e3 = 1 == (t&t)
~ e2 = 1 == (!f)
~ e1 = 1 == t

# Test with literal string
~ > # Test with literal string

assert a="a";
~ > assert a="a";

assert e1==a=("a");
~ > assert e1==a=("a");
assert e2==(not 0);
~ > assert e2==(not 0);
assert e3==a=("a" & "a");
~ > assert e3==a=("a" & "a");
assert e4==a=("a" | 0);
~ > assert e4==a=("a" | 0);
assert e5==a=("a" | ?);
~ > assert e5==a=("a" | ?);
assert e6==a=( 0  | "a");
~ > assert e6==a=( 0  | "a");
assert e7==a=( ?  | "a");
~ > assert e7==a=( ?  | "a");
assert e8==a=("a" | "a");
~ > assert e8==a=("a" | "a");
assert e9==("a" ^ 0);
~ > assert e9==("a" ^ 0);

show -cells;
~ > show -cells;
~ @ = ! == node 
~ a = "a"
~ f = 0
~ t = 1
~ r1 = ! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = 1 == ("a"^0)
~ e8 = 1 == (a="a")
~ e7 = 1 == (a="a")
~ e6 = 1 == (a="a")
~ e5 = 1 == (a="a")
~ e4 = 1 == (a="a")
~ e3 = 1 == (a="a")
~ e2 = 1
~ e1 = 1 == (a="a")

# Test with variable string
~ > # Test with variable string

assert e1==a=(a);
~ > assert e1==a=(a);
assert e2==(not f);
~ > assert e2==(not f);
assert e3==a=(a & a);
~ > assert e3==a=(a & a);
assert e4==(t | f);
~ > assert e4==(t | f);
assert e5==(t | ?);
~ > assert e5==(t | ?);
assert e6==a=(f | a);
~ > assert e6==a=(f | a);
assert e7==a=(? | a);
~ > assert e7==a=(? | a);
assert e8==a=(a | a);
~ > assert e8==a=(a | a);
assert e9==(a ^ f);
~ > assert e9==(a ^ f);

show -cells;
~ > show -cells;
~ @ = ! == node 
~ a = "a"
~ f = 0
~ t = 1
~ r1 = ! == if(e1&(e2&(e3&(e4&(e5&(e6&(e7&(e8&e9))))))));
~ e9 = 1 == (a^f)
~ e8 = 1 == (a=(a|a))
~ e7 = 1 == (a=(?|a))
~ e6 = 1 == (a=(f|a))
~ e5 = 1 == (t|?)
~ e4 = 1 == (t|f)
~ e3 = 1 == (a=(a&a))
~ e2 = 1 == (!f)
~ e1 = 1 == (a=a)

# Verify that all e1-e9 cells above have a value of 1
~ > # Verify that all e1-e9 cells above have a value of 1
