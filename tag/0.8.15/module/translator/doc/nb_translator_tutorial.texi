@c Translator tutorial
@c   A section to the NodeBrain Tutorial and Translator Nodebrain Module docs.

@quotation
@i{I don't mind what language an opera is sung in so long as it is a language I don't understand.}
---Sir Edward Appleton (1892--1965)
@end quotation

NodeBrain supports rules used to translate an opera into NodeBrain commands.  Well, okay, not exactly an opera, but lines of text conforming to some foreign syntax for which the significant elements can be recognized and extracted with regular expressions.  The desired translation is specified in a NodeBrain translation rule file called a "translator."  This capability is made available to node modules via the API.  The Translator node module is a simple example of one that uses NodeBrain's translator feature. 

@section Foreign Text

Let's start this tutorial with a file named @code{opera.txt} containing the text of a Mother Goose rhyme.

@cartouche
@smallexample
# File: tutorial/Translator/opera.txt
#
# Mother Goose Nursery Rhyme
# The Man Who Had Naught
#
There was a man and he had naught,
  And robbers came to rob him;
He crept up to the chimney pot,
  And then they thought they had him.

But he got down on t'other side,
  And then they could not find him;
He ran fourteen miles in fifteen days,
  And never looked behind him.
@end smallexample
@end cartouche

@section Translator File

A translator recognizes elements of foreign text and converts it into NodeBrain commands.  Let's create one called @code{opera.nbx} that can be used to translate files that look like the @code{opera.txt} file.  

@cartouche
@smallexample
# File: tutorial/Translator/opera.nbx
#

# Ignore lines starting with "#"
(^#)

# Pick up lines with "had" followed by a word,
# but continue on looking for other matches
# even when a match is found.
@@(had (\w*)):alert type="Had",what="$[1]";

# Look for "he had" lines - will be subset of "had" lines
(he had (\w*)):alert type="HeHad",what="$[1]";

# Look for lines starting with "And".
(^\s*And )@{
  (^then they )@{
    (thought)
    :assert info="$[=]";
    @}
  (^(\w*) )[$[1]]@{
    "robbers":assert info="bad guys $[>]";
    "never":assert info="they didn't $[>]";
    @}
  @}

# Look for "He <verb>" lines.
(^He (crept|ran) )@{
  @@"fourteen miles in fifteen days,":assert info="slow runner this man who had naught";
  :assert heVerb="$[1]";
  @}
@end smallexample
@end cartouche
 
The lines starting with an open parenthesis @code{(} specify a regular expression up to the balanced close parenthesis @code{)} to be matched against lines of foreign text.
The first matching expression determines the translation; that is, the translator stops on a match and subsequent expressions are not evaluated.
However, if you start the line with "@@(" instead, the translator will continue even after a match.  

If nothing follows the expression, as with @code{(^#)} and @code{(thought)} above, the translator takes no action on a match.
This means all lines starting with @code{#} will translate into nothing.  You could say they are ignored or suppressed.

An expression can also be followed by a single action, like the @code{@@(had (\w*))} and @code{(he had (\w*))} expressions which are followed by "@code{:alert ...}".

When an expression is followed by "@{", a nested translator is specified until the following "@}".
A nested translator matches against the text following the previous match.
Let's consider the input line "And then they thought they had him."
When this line matches @code{(^s*And )} in the translator,
the nested translation block will work on "then they thought they had him."
After a match on @code{(^then they )}, nested translation continues trying to match "thought they had him."

NodeBrain commands are passed to the interpreter with an expression starting with colon (@code{:}) to distinguish them from other operations supported by the translator.
A @code{$[@i{n}]} in the command is replaced with the string matching the @i{n}th parenthetical subexpression, starting at 0 for the outer parenthesis.
A @code{$[=]} is replaced with the text being matched, and @code{$[>]} is replaced with the text following the last match.

The text buffer can be replaced with an expression of the form @code{[@i{text}]}.
In the example above, the @code{[$[1]]} following @code{(^(\w*) )} replaces the text buffer with the matched word.

Strings enclosed in double quotes (e.g., @code{"robbers"}) specify an exact match.  When strings are used, they must be placed at the start of a block.  NodeBrain likes to look for exact matches before regular expressions.

@section Rule File Using Translator Node

A translator works in concert with NodeBrain rules---hopefully not as difficult to understand as an operatic concert.
Here's a rule file called @code{opera.nb} designed to work with the translator above.

@cartouche
@smallexample
#!/usr/local/bin/nb
# File: tutorial/Translator/opera.nb
@b{define opera node translator("opera.nbx");}
opera. define r1 on(info~"they didn't");
opera. define r2 if(type="HeHad");

@b{opera:And robbers got away.}
opera:And never mind.
opera:And never worry.
@b{opera("translate"):opera.txt}

@end smallexample
@end cartouche
  
The first highlighted line defines a translator node that uses the @code{opera.nbx} translator.  The two rules, @code{r1} and @code{r2}, do nothing except demonstrate a rule can fire in response to foreign text.
  
The second highlighted line, which starts with @code{opera:}, sends foreign text to the translator node for translation.
The last highlighted line, starting with @code{opera(}, directs the translator nodes to translate the foreign text file @code{opera.txt}. 

@page
@section Lost in Translation

When you execute @code{opera.nb}, you should see something like this.  

@cartouche
@smallexample
$ ./opera.nb
2009/01/28 17:49:27 NB000I Argument [1] ./opera.nb
> #!/usr/local/bin/nb
> # File: tutorial/Translator/opera.nb
> define opera node translator("opera.nbx");
@b{2009/01/28 17:49:27 NB000I Loading translator "opera.nbx"}
---------- --------
# File: tutorial/Translator/opera.nbx
#

# Ignore lines starting with "#"
(^#)

# Pick up lines with "had" followed by a word,
# but continue on looking for other matches
# even when a match is found.
@@(had (\w*)):alert type="Had",what="$[1]";

# Look for "he had" lines - will be subset of "had" lines
(he had (\w*)):alert type="HeHad",what="$[1]";

# Look for lines starting with "And".
(^\s*And )@{
  (^then they )@{
    (thought)
    :assert info="$[=]";
    @}
  (^(\w*) )[$[1]]@{
    "robbers":assert info="bad guys $[>]";
    "never":assert info="they didn't $[>]";
    @}
  @}

# Look for "He <verb>" lines.
(^He (crept|ran) )@{
  @@"fourteen miles in fifteen days,":assert info="slow runner this man who had naught";
  :assert heVerb="$[1]";
  @}
---------- --------
2009/01/28 17:49:27 NB000I Translator "opera.nbx" loaded successfully.
@end smallexample
@end cartouche
@dots{} continued on next page @dots{}
@cartouche
@smallexample
> opera. define @b{r1} on(info~"they didn't");
> opera. define @b{r2} if(type="HeHad");
> opera:And robbers got away.
> opera. assert info="bad guys got away.";
> opera:And never mind.
> opera. assert info="they didn't mind.";
@b{2009/01/28 17:49:27 NB000I Rule opera.r1 fired}
> opera:And never worry.
> opera. assert info="they didn't worry.";
> opera("translate"):opera.txt
---------- --------> opera.txt
> opera. alert type="Had",what="naught";
> opera. alert type="HeHad",what="naught";
@b{2009/01/28 17:49:27 NB000I Rule opera.r2 fired}
> opera. assert info="bad guys came to rob him;";
> opera. assert heVerb="crept";
> opera. alert type="Had",what="him";
> opera. assert info="could not find him;";
> opera. assert info="slow runner this man who had naught";
> opera. assert heVerb="ran";
> opera. assert info="they didn't looked behind him.";
@b{2009/01/28 17:49:27 NB000I Rule opera.r1 fired}
---------- --------< opera.txt
2009/01/28 17:49:27 NB000I Source file "./opera.nb" included. size=237
2009/01/28 17:49:27 NB000I NodeBrain nb[16261] terminating - exit code=0
$
@end smallexample
@end cartouche

As an exercise, you should perform the translation yourself to make sure you understand what is going on here.
At least focus on the lines around the first firing of rule @code{opera.r1}, starting with @code{opera:And never mind.}
Walk @code{And never mind.} through the translator to see why it emits @code{assert info="they didn't mind."} triggering @code{r1}.
Do you understand why @code{opera:And never worry.} emits a similar assertion without trigging @code{r1}?
It is a characteristic of NodeBrain's @code{on} rule and the fact that the condition didn't change. 
An @code{if} rule would have fired both times.

The translator @code{opera.nbx} is designed to operate on lines like those found in @code{opera.txt}, and the rule file @code{opera.nb} is designed to work with the translator. 
You may have noticed that the translator was not designed specifically to work with these rules, because it emits commands that provide information the rules don't need.  In many cases, a translator and a set of rules are designed together and the translator only emits information that the rules use.

