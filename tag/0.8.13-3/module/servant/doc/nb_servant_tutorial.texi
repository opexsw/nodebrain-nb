@c Servant Node Tutorial
@c
@c   This file is included in the following documents
@c     o  NodeBrain Tutorial
@c     o  Servant NodeBrain Module
@c 
@quotation
@i{In order to become the master, the politician poses as the servant.}
---Charles de Gaulle (1890--1970)
@end quotation

NodeBrain is not intended to be the master of all things.  As in politics, it is often more convenient to let a servant be the master.  In this tutorial, you will learn how to create a servant in your favorite programming language to obtain information needed to make decisions.  You will see that when a servant sends commands to NodeBrain, it becomes the master---like a politician once elected.

@section Creating a Servant Program

To keep it simple and only hint at something useful, let's create a servant script using Perl that pretends to tell you the cost of gas and bread, something every politician should be prepared to include in a campaign speech.

@cartouche
@smallexample
#!/usr/bin/perl
# File: tutorial/Servant/charles.pl
my $gas=2.50;
my $bread=1.10;
$|=1;
while(<>)@{
  chomp($_);
  if(/gas/)@{print("assert gas=$gas;\n");$gas+=.50;@}
  elsif(/bread/)@{print("assert bread=$bread;\n");$bread+=.25@}
  else@{print("alert msg=\"item '$_' not recognized\";\n");@}
  @}
@end smallexample
@end cartouche

@section Specifying a Servant Node

Now you need some rules to use the servant program.  Create a script that looks like this.

@cartouche
@smallexample
#!/usr/local/bin/nb -s
# File: tutorial/Servant/charles.nb
@b{define price node servant:|=|:./charles.pl}
define ouch on(gas>4 or bread>3):stop;
define getgasprice on(~(3s)):price:gas
define getbreadprice on(~(3s)):price:bread
@end smallexample
@end cartouche

The Servant node module specification includes an @code{=} command to specify the program and what to do with @code{stdout} and @code{stderr}.
It also supports a leading pipe (@code{|}) to enable the sending of text to the program on @code{stdin}.

@section Execution

This script is designed to run like an agent without detaching from the terminal.  The @code{-s} option is the trick.  The script will pause for 3 seconds between scheduled events, so just be patient and the script will end when the price of one of the items gets too painful.

@cartouche
@smallexample
$ ./charles.nb
2008/08/21 19:08:28 NB000I Argument [2] ./charles.nb
> #!/usr/local/bin/nb -s
> # File: tutorial/Servant/charles.nb
> define price node servant:|=|:./charles.pl
> define ouch on(gas>4 or bread>3):stop;
> define getgasprice on(~(3s)):price:gas
> define getbreadprice on(~(3s)):price:bread
2008/08/21 19:08:28 NB000I Source file "./charles.nb" included. size=194
2008/08/21 19:08:28 NB000T Servant mode selected
---------- ----------------------------------------------------
2008/08/21 19:08:28 NM000I servant price: Enabling|=|:./charles.pl
2008/08/21 19:08:28 NM000I servant price: Enabled[21633] |=|:./charles.pl
2008/08/21 19:08:31 NB000I Rule getbreadprice fired
: price:bread
2008/08/21 19:08:31 NB000I Rule getgasprice fired
: price:gas
> price. assert bread=2.1;
> price. assert gas=3.25;
2008/08/21 19:08:34 NB000I Rule getbreadprice fired
: price:bread
2008/08/21 19:08:34 NB000I Rule getgasprice fired
: price:gas
> price. assert bread=2.35;
> price. assert gas=3.75;
2008/08/21 19:08:37 NB000I Rule getbreadprice fired
: price:bread
2008/08/21 19:08:37 NB000I Rule getgasprice fired
: price:gas
> price. assert bread=2.6;
> price. assert gas=4.25;
2008/08/21 19:08:37 NB000I Rule ouch fired
: stop;
2008/08/21 19:08:37 NB000I [21633] Killed(1)
2008/08/21 19:08:37 NB000I NodeBrain nb[21632] terminating - exit code=0
@end smallexample
@end cartouche
